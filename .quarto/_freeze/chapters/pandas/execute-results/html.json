{
  "hash": "37b64faa5e819bd9adc31315c46249ef",
  "result": {
    "markdown": "# Pandas\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport random\n```\n:::\n\n\n## Series\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ns = pd.Series([\"Enero\", \"Febrero\", \"Marzo\", \"Abril\"])\n```\n:::\n\n\nÍndices \n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ns2 = pd.Series(\n    [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\"], \n    index = [\"a\", \"b\", \"c\", \"d\"]\n)\n```\n:::\n\n\nLos elementos de una serie indexada por etiquetas se puede acceder por atributo a través de su etiqueta.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint(s2.a)\nprint(s2[\"b\"])\nprint(s2[1])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnero\nFebrero\nFebrero\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndates = pd.date_range(start=\"20230404\", periods=60, freq=\"D\")\ncounts = [random.randrange(1, 50, 1) for i in range(60)]\ns3 = pd.Series(data = counts, index = dates)\ns3\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n2023-04-04    42\n2023-04-05    43\n2023-04-06    24\n2023-04-07    22\n2023-04-08     2\n2023-04-09    18\n2023-04-10    41\n2023-04-11    45\n2023-04-12    40\n2023-04-13    38\n2023-04-14    34\n2023-04-15    13\n2023-04-16    16\n2023-04-17    47\n2023-04-18    49\n2023-04-19    39\n2023-04-20    10\n2023-04-21    44\n2023-04-22    40\n2023-04-23    16\n2023-04-24    14\n2023-04-25    34\n2023-04-26    21\n2023-04-27    17\n2023-04-28    12\n2023-04-29    29\n2023-04-30     7\n2023-05-01    15\n2023-05-02    29\n2023-05-03    14\n2023-05-04     3\n2023-05-05    23\n2023-05-06    49\n2023-05-07    22\n2023-05-08     4\n2023-05-09    32\n2023-05-10    35\n2023-05-11    37\n2023-05-12    25\n2023-05-13    19\n2023-05-14     3\n2023-05-15    35\n2023-05-16    40\n2023-05-17     1\n2023-05-18    14\n2023-05-19    29\n2023-05-20    15\n2023-05-21     7\n2023-05-22    13\n2023-05-23    37\n2023-05-24    20\n2023-05-25    47\n2023-05-26    29\n2023-05-27    27\n2023-05-28    14\n2023-05-29     8\n2023-05-30     4\n2023-05-31    10\n2023-06-01    32\n2023-06-02     4\nFreq: D, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ns3[\"2023-04\"]\ns3.mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n24.216666666666665\n```\n:::\n:::\n\n\n## Data Frame\n\n### Construcción\n\nConstrucción de data frame indicando por un lado los datos y por otro las columnas\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf1 = pd.DataFrame(\n    index = [\"Enero\", \"Febrero\", \"Marzo\"],\n    columns = [\n        \"Casos\", \"UCI\", \"Fallecidos\"\n    ],\n    data = [\n        (10, 1, 2),\n        (40, 3, 4),\n        (30, 5, 0)\n    ]\n)\n```\n:::\n\n\nConstrucción de data frame mediante diccionario de columnas\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf2 = pd.DataFrame(\n    data = {\n        \"Casos\": [10, 40, 50],\n        \"UCI\": [1, 3, 4],\n        \"Fallecidos\": [2, 4, 0]\n    },\n    index = [\"Enero\", \"Febrero\", \"Marzo\"]\n)\n```\n:::\n\n\n### Métodos básicos\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nlen(df1)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n3\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf1.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nIndex: 3 entries, Enero to Marzo\nData columns (total 3 columns):\n #   Column      Non-Null Count  Dtype\n---  ------      --------------  -----\n 0   Casos       3 non-null      int64\n 1   UCI         3 non-null      int64\n 2   Fallecidos  3 non-null      int64\ndtypes: int64(3)\nmemory usage: 96.0+ bytes\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprint(df1.index)\nprint(type(df1.index))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Enero', 'Febrero', 'Marzo'], dtype='object')\n<class 'pandas.core.indexes.base.Index'>\n```\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nprint(df1.values)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[[10  1  2]\n [40  3  4]\n [30  5  0]]\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprint(df1.columns)\nprint(type(df1.columns))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Casos', 'UCI', 'Fallecidos'], dtype='object')\n<class 'pandas.core.indexes.base.Index'>\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nprint(df2.index)\nprint(df2.columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Enero', 'Febrero', 'Marzo'], dtype='object')\nIndex(['Casos', 'UCI', 'Fallecidos'], dtype='object')\n```\n:::\n:::\n\n\n### Métodos `Index.get_loc()` e `Index.get_indexer()`\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf1.index.get_loc(\"Febrero\")\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\n1\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf1.columns.get_loc(\"UCI\")\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n1\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf1.index.get_indexer([\"Febrero\", \"Marzo\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\narray([1, 2])\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf1.columns.get_indexer([\"UCI\", \"Casos\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\narray([1, 0])\n```\n:::\n:::\n\n\n### Datos nulos\n\n[UPV - Visualización de datos con Python - Eliminar datos, filas y columnas](https://www.youtube.com/watch?v=iwVmMm2V60A&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=10)\n\n\nPara sustituir `DataFrame.fillna()` y para eliminar `DataFrame.dropna()`.\n\nEl método `count()` da el número de valores no nulos (se puede aplicar a `Series` o `DataFrame`). \n\n\n\n### Seleccionar filas y/o columnas\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndf = pd.DataFrame(\n    index = [\"Enero\", \"Febrero\", \"Marzo\", \"Abril\"],\n    columns = [\n        \"Casos\", \"UCI\", \"Fallecidos\"\n    ],\n    data = [\n        (10, 1, 2),\n        (40, 3, 4),\n        (30, 5, 0),\n        (20, 2, 1)\n    ]\n)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI  Fallecidos\nEnero       10    1           2\nFebrero     40    3           4\nMarzo       30    5           0\nAbril       20    2           1\n```\n:::\n:::\n\n\n#### Seleccionar filas y/o columnas por etiqueta (`loc`) o índice entero (`iloc`)\n\n`loc` = _location_\n`iloc` = _Integer location_\n\nVarias filas y columnas por etiqueta\n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf_subset = df.loc[[\"Enero\", \"Marzo\"], [\"UCI\", \"Fallecidos\"]]\nprint(df_subset)\ntype(df_subset) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       UCI  Fallecidos\nEnero    1           2\nMarzo    5           0\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nSlices de etiquetas\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf_subset = df.loc[\"Enero\":\"Febrero\", \"UCI\":\"Fallecidos\"]\nprint(df_subset)\ntype(df_subset) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         UCI  Fallecidos\nEnero      1           2\nFebrero    3           4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf_subset = df.loc[[\"Enero\",\"Marzo\"], \"UCI\":\"Fallecidos\"]\nprint(df_subset)\ntype(df_subset) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       UCI  Fallecidos\nEnero    1           2\nMarzo    5           0\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nVarias filas y columnas por índice\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndf_subset = df.iloc[[0,1], [1,2]]\nprint(df_subset)\ntype(df_subset) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         UCI  Fallecidos\nEnero      1           2\nFebrero    3           4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nSlices de índices\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndf_subset = df.iloc[0:2, 1:3]\nprint(df_subset)\ntype(df_subset) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         UCI  Fallecidos\nEnero      1           2\nFebrero    3           4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nTodas las filas y varias columnas, por etiqueta\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ncases_uci = df.loc[:, [\"Casos\", \"UCI\"]]\nprint(cases_uci)\ntype(cases_uci) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI\nEnero       10    1\nFebrero     40    3\nMarzo       30    5\nAbril       20    2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nTodas las filas y una sola columna, por etiqueta\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\nuci = df.loc[:, [\"UCI\"]]\nprint(uci)\ntype(uci) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         UCI\nEnero      1\nFebrero    3\nMarzo      5\nAbril      2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\nuci = df.loc[:, \"UCI\"]\nprint(uci)\ntype(uci) # Series\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnero      1\nFebrero    3\nMarzo      5\nAbril      2\nName: UCI, dtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\nTodas las filas y una sola columna, por posición\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\nuci = df.iloc[:, [1]]\nprint(uci)\ntype(uci) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         UCI\nEnero      1\nFebrero    3\nMarzo      5\nAbril      2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\nuci = df.iloc[:, 1]\nprint(uci)\ntype(uci) # Series\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnero      1\nFebrero    3\nMarzo      5\nAbril      2\nName: UCI, dtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\nVarias filas y todas las columnas por etiqueta\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\nenero_marzo = df.loc[[\"Enero\", \"Marzo\"], :]\nprint(enero_marzo)\ntype(enero_marzo) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Casos  UCI  Fallecidos\nEnero     10    1           2\nMarzo     30    5           0\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\nfeb_marzo = df.loc[\"Febrero\":\"Marzo\", :]\nprint(feb_marzo)\ntype(feb_marzo) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI  Fallecidos\nFebrero     40    3           4\nMarzo       30    5           0\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\nenero_marzo = df.loc[[\"Enero\", \"Marzo\"]]\nprint(enero_marzo)\ntype(enero_marzo) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Casos  UCI  Fallecidos\nEnero     10    1           2\nMarzo     30    5           0\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nVarias filas y todas las columnas por índice\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\nenero_marzo = df.iloc[[0,1], :]\nprint(enero_marzo)\ntype(enero_marzo) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI  Fallecidos\nEnero       10    1           2\nFebrero     40    3           4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\nenero_marzo = df.iloc[[0,1]]\nprint(enero_marzo)\ntype(enero_marzo) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI  Fallecidos\nEnero       10    1           2\nFebrero     40    3           4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=34}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nUna fila y todas las columnas por etiqueta\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\nenero = df.loc[[\"Enero\"], :]\nprint(enero)\ntype(enero) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Casos  UCI  Fallecidos\nEnero     10    1           2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\nenero = df.loc[[\"Enero\"]]\nprint(enero)\ntype(enero) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       Casos  UCI  Fallecidos\nEnero     10    1           2\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=36}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\nenero = df1.loc[\"Enero\", :]\nprint(enero)\ntype(enero) # Series\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCasos         10\nUCI            1\nFallecidos     2\nName: Enero, dtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\nenero = df1.loc[\"Enero\"]\nprint(enero)\ntype(enero) # Series\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCasos         10\nUCI            1\nFallecidos     2\nName: Enero, dtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=38}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\nUn solo elemento\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ndf_subset = df.loc[\"Enero\",\"UCI\"] \nprint(df_subset)\ntype(df_subset) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=39}\n```\nnumpy.int64\n```\n:::\n:::\n\n\n#### Atajo para un solo elemento (`at`, `iat`)\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\nvalue = df.at[\"Enero\", \"UCI\"]\nprint(value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\nvalue = df.iat[0, 1]\nprint(value)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1\n```\n:::\n:::\n\n\n#### Atajo para seleccionar una columna\n\nTanto las columnas de `DataFrames` como los elementos de `Series` (indexada con etiquetas) se pueden acceder por atributo a través de su etiqueta\n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\nuci = df.UCI\nprint(uci)\nprint(type(uci)) # Series\n\nprint(uci.Febrero)\nprint(uci[\"Febrero\"])\nprint(uci[2])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnero      1\nFebrero    3\nMarzo      5\nAbril      2\nName: UCI, dtype: int64\n<class 'pandas.core.series.Series'>\n3\n3\n5\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\nuci = df[\"UCI\"]\nprint(uci)\ntype(uci) # Series\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnero      1\nFebrero    3\nMarzo      5\nAbril      2\nName: UCI, dtype: int64\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=43}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\n#### Atajo para seleccionar varias columnas\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\ncasos_uci = df[[\"Casos\",\"UCI\"]]\nprint(casos_uci)\nprint(type(casos_uci)) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI\nEnero       10    1\nFebrero     40    3\nMarzo       30    5\nAbril       20    2\n<class 'pandas.core.frame.DataFrame'>\n```\n:::\n:::\n\n\n#### Atajo para seleccionar slice de filas\n\nSe proporciona por conveniencia, pero me resulta inconsistente con el acceso a columnas como atributo. \n\nSlice de filas por etiqueta\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ndf_subset = df[\"Enero\":\"Febrero\"] \nprint(df_subset)\ntype(df_subset) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI  Fallecidos\nEnero       10    1           2\nFebrero     40    3           4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\nSlice de filas por índice\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\ndf_subset = df[0:2] \nprint(df_subset)\ntype(df_subset) # DataFrame\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI  Fallecidos\nEnero       10    1           2\nFebrero     40    3           4\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=46}\n```\npandas.core.frame.DataFrame\n```\n:::\n:::\n\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\nprint(df[0:1].Casos)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnero    10\nName: Casos, dtype: int64\n```\n:::\n:::\n\n\n#### Filtrado de filas y/o columnas basado en condición lógica\n\n[Pandas- Boolean Indexing](https://pandas.pydata.org/docs/user_guide/indexing.html#boolean-indexing)\n\nPara filtrar filas pasar un vector lógico de la misma longitud que `df.index` como argumento de `df[]` o primer argumento de `df.loc[]`. \n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\ncriterion = df[\"Casos\"] > 20 # Series\nprint(criterion)\ndf_filtered = df[criterion]\nprint(df_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnero      False\nFebrero     True\nMarzo       True\nAbril      False\nName: Casos, dtype: bool\n         Casos  UCI  Fallecidos\nFebrero     40    3           4\nMarzo       30    5           0\n```\n:::\n:::\n\n\n::: {.cell execution_count=49}\n``` {.python .cell-code}\ncriterion = df[\"Casos\"] > 20 # Series\ndf_filtered = df.loc[criterion, [\"Casos\", \"UCI\"]]\nprint(df_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         Casos  UCI\nFebrero     40    3\nMarzo       30    5\n```\n:::\n:::\n\n\n::: {.cell execution_count=50}\n``` {.python .cell-code}\ncriterion = df[\"Casos\"].map(lambda x: x > 20)\nprint(criterion)\ndf_filtered = df[criterion]\nprint(df_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nEnero      False\nFebrero     True\nMarzo       True\nAbril      False\nName: Casos, dtype: bool\n         Casos  UCI  Fallecidos\nFebrero     40    3           4\nMarzo       30    5           0\n```\n:::\n:::\n\n\n::: {.cell execution_count=51}\n``` {.python .cell-code}\ncriterion = [x > 20 for x in df[\"Casos\"]]\nprint(criterion)\ndf_filtered = df[criterion]\nprint(df_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[False, True, True, False]\n         Casos  UCI  Fallecidos\nFebrero     40    3           4\nMarzo       30    5           0\n```\n:::\n:::\n\n\n::: {.cell execution_count=52}\n``` {.python .cell-code}\ncriterion = [\"a\" in label for label in df.index]\nprint(criterion)\ndf_filtered = df[criterion]\nprint(df_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[False, False, True, False]\n       Casos  UCI  Fallecidos\nMarzo     30    5           0\n```\n:::\n:::\n\n\nPara filtrar columnas pasar un vector lógico de la misma longitud que `df.columns` como segundo argumento de `df.loc[]`. \n\n::: {.cell execution_count=53}\n``` {.python .cell-code}\ncriterion = [\"a\" in label for label in df.columns]\nprint(criterion)\ndf_filtered = df.loc[:, criterion]\nprint(df_filtered)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[True, False, True]\n         Casos  Fallecidos\nEnero       10           2\nFebrero     40           4\nMarzo       30           0\nAbril       20           1\n```\n:::\n:::\n\n\n### Operaciones entre `DataFrames`\n\n[UPV - Visualización de datos con Python - Operaciones entre Data Frames](https://www.youtube.com/watch?v=ZNI4JgZ_06I&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=5)\n\n::: {.cell execution_count=54}\n``` {.python .cell-code}\ndf1 = pd.DataFrame(\n    columns=[\"C0\", \"C1\", \"C2\", \"C3\"],\n    index = [\"F0\", \"F1\", \"F2\", \"F3\"], \n    data=[\n        (\"F0C0\", \"F0C1\", \"F0C2\", \"F0C3\"),\n        (\"F1C0\", \"F1C1\", \"F1C2\", \"F1C3\"),\n        (\"F2C0\", \"F2C1\", \"F2C2\", \"F2C3\"),\n        (\"F3C0\", \"F3C1\", \"F3C2\", \"F3C3\")        \n    ]\n)\ndf2 = pd.DataFrame(\n    columns=[\"C0\", \"C1\", \"C2\", \"C3\"],\n    index = [\"F4\", \"F5\", \"F6\", \"F7\"], \n    data=[\n        (\"F4C0\", \"F4C1\", \"F4C2\", \"F4C3\"),\n        (\"F5C0\", \"F5C1\", \"F5C2\", \"F5C3\"),\n        (\"F6C0\", \"F6C1\", \"F6C2\", \"F6C3\"),\n        (\"F7C0\", \"F7C1\", \"F7C2\", \"F7C3\")        \n    ]\n)\ndf3 = pd.DataFrame(\n    columns=[\"C0\", \"C1\", \"C2\", \"C3\"],\n    index = [\"F8\", \"F9\", \"F10\", \"F11\"], \n    data=[\n        (\"F8C0\", \"F8C1\", \"F8C2\", \"F8C3\"),\n        (\"F9C0\", \"F9C1\", \"F9C2\", \"F9C3\"),\n        (\"F10C0\", \"F10C1\", \"F10C2\", \"F10C3\"),\n        (\"F11C0\", \"F11C1\", \"F11C2\", \"F11C3\")        \n    ]\n)\ndf4 = pd.DataFrame(\n    columns=[\"C2\", \"C3\", \"C6\"],\n    index = [\"F2\", \"F3\", \"F7\", \"F8\"], \n    data=[\n        (\"F2C2\", \"F2C3\",\"F2C6\"),\n        (\"F3C2\", \"F9C3\",\"F3C6\"),\n        (\"F7C2\", \"F7C3\",\"F7C6\"),\n        (\"F8C2\", \"F8C3\",\"F8C6\")        \n    ]\n)\ndf5 = pd.DataFrame(\n    columns=[\"C5\", \"C6\", \"C7\"],\n    index = [\"F2\", \"F3\", \"F7\", \"F8\"], \n    data=[\n        (\"F2C5\", \"F2C6\",\"F2C7\"),\n        (\"F3C5\", \"F9C6\",\"F3C7\"),\n        (\"F7C5\", \"F7C6\",\"F7C7\"),\n        (\"F8C5\", \"F8C6\",\"F8C7\")        \n    ]\n)\n```\n:::\n\n\n#### `concat`\n\n[UPV - Visualización de datos con Python - Método concatenate](https://www.youtube.com/watch?v=1M6e09cziFw&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=6)\n\n::: {.cell execution_count=55}\n``` {.python .cell-code}\nr = pd.concat(\n    [df1, df2, df3],\n    axis = 0, #filas\n    join = \"outer\" # unión\n)\n```\n:::\n\n\n#### `merge`\n\n[Pandas: Método Merge | 7/71 | UPV - YouTube](https://www.youtube.com/watch?v=yAo6QlSRXjA&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=7)\n\n#### `join`\n\n[Pandas: Método Join | 8/71 | UPV - YouTube](https://www.youtube.com/watch?v=DyebXOU6SmY&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=8)\n\n#### `append`\n\n[Pandas: Método Append | 9/71 | UPV - YouTube](https://www.youtube.com/watch?v=ty8kk4jLtGY&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=9)\n\n\n#### `drop`\n\n[UPV - Visualización de datos con Python - Eliminar datos, filas y columnas](https://www.youtube.com/watch?v=iwVmMm2V60A&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=10)\n\n\n\n\n## Lectura y escritura de ficheros\n\n[Pandas: Creación de DataFrames a partir de ficheros: Ficheros CSV | 15/71 | UPV - YouTube](https://www.youtube.com/watch?v=c5Q5JJH6los&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=15)\n\n\nLeer desde fichero `csv` local.\n\n::: {.cell execution_count=56}\n``` {.python .cell-code}\ndf = pd.read_csv(\"../data/sample.csv\", index_col=0)\nprint(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Casos   UCI   Fallecidos\nMes                               \nEnero       100    10           20\nFebrero     400    30           40\nMarzo       300    50            0\nAbril       250    20           30\n```\n:::\n:::\n\n\nLeer desde fichero `csv` en GitHub ([Escovid19data: Capturando colaborativamente datos de COVID-19 por provincias en España](https://github.com/montera34/escovid19data)).\n\n::: {.cell execution_count=57}\n``` {.python .cell-code}\nurl = \"https://raw.githubusercontent.com/montera34/escovid19data/master/data/output/covid19-ccaa-spain_consolidated.csv\"\ncovid_data = pd.read_csv(url, index_col=1)\ncovid_data.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nInt64Index: 18259 entries, 1 to 17\nData columns (total 86 columns):\n #   Column                              Non-Null Count  Dtype  \n---  ------                              --------------  -----  \n 0   ccaa                                18259 non-null  object \n 1   date                                18259 non-null  object \n 2   new_cases                           6843 non-null   float64\n 3   PCR                                 6211 non-null   float64\n 4   TestAc                              2964 non-null   float64\n 5   activos                             3238 non-null   float64\n 6   hospitalized                        15659 non-null  float64\n 7   hospitalized_new                    2883 non-null   float64\n 8   hospitalized_accumulated            2102 non-null   float64\n 9   intensive_care                      14010 non-null  float64\n 10  deceased                            16796 non-null  float64\n 11  cases_accumulated                   15972 non-null  float64\n 12  cases_accumulated_PCR               10572 non-null  float64\n 13  recovered                           821 non-null    float64\n 14  num_casos                           7429 non-null   float64\n 15  num_casos_cum1                      7429 non-null   float64\n 16  num_casos_prueba_pcr                7429 non-null   float64\n 17  num_casos_prueba_test_ac            7429 non-null   float64\n 18  num_casos_prueba_ag                 7429 non-null   float64\n 19  num_casos_prueba_elisa              7429 non-null   float64\n 20  num_casos_prueba_desconocida        7429 non-null   float64\n 21  num_casos2                          15523 non-null  float64\n 22  num_hosp                            15523 non-null  float64\n 23  num_uci                             15523 non-null  float64\n 24  num_def                             15523 non-null  float64\n 25  deceased_hosp_eus                   276 non-null    float64\n 26  poblacion                           18258 non-null  float64\n 27  num_casos_cum2                      15523 non-null  float64\n 28  num_hosp_cum                        15523 non-null  float64\n 29  num_uci_cum                         15523 non-null  float64\n 30  num_def_cum                         15523 non-null  float64\n 31  mnt_pdf_deceased                    5453 non-null   float64\n 32  mnt_pdf_Hosp_Totales                5035 non-null   float64\n 33  mnt_pdf_Hosp_7dias                  5032 non-null   float64\n 34  mnt_pdf_UCI_Totales                 5035 non-null   float64\n 35  mnt_pdf_UCI_7dias                   5035 non-null   object \n 36  mnt_pdf_Hosp_actual                 2280 non-null   float64\n 37  mnt_pdf_per_CamasCovid              2280 non-null   float64\n 38  mnt_pdf_UCI_actual                  2280 non-null   float64\n 39  mnt_pdf_per_CamasUCI                2280 non-null   float64\n 40  mnt_pdf_Ingresos_24horas            2280 non-null   float64\n 41  mnt_pdf_Altas_24horas               2280 non-null   float64\n 42  mnt_daily_deaths                    5301 non-null   float64\n 43  mnt_deceased                        5301 non-null   float64\n 44  mnt_csv_daily_cases                 5653 non-null   float64\n 45  mnt_csv_new_hosp                    5653 non-null   float64\n 46  mnt_csv_new_ic                      5653 non-null   float64\n 47  mnt_csv_daily_deaths                5653 non-null   float64\n 48  mnt_csv_deceased                    5653 non-null   float64\n 49  vac_date_published                  5386 non-null   object \n 50  ccaa_vac                            5386 non-null   object \n 51  vac_dosis_entregadas_Pfizer         5276 non-null   float64\n 52  Dosis.entregadas.Pfizer.pediatrica  1012 non-null   float64\n 53  vac_dosis_entregadas_Moderna        5276 non-null   float64\n 54  vac_dosis_entregadas_AZ             4952 non-null   float64\n 55  Dosis.entregadas.Janssen            4026 non-null   float64\n 56  vac_dosis_entregadas                5386 non-null   float64\n 57  vac_dosis_administradas             5386 non-null   float64\n 58  vac_perc_entregadas                 5386 non-null   float64\n 59  vac_total_1_vacuna                  4250 non-null   float64\n 60  vac_dosis_pauta_completada          5240 non-null   float64\n 61  Total.dosis.adicional               1844 non-null   float64\n 62  vac_date_data                       19 non-null     object \n 63  vac_date_last                       5386 non-null   object \n 64  date_vac                            5386 non-null   object \n 65  cases_14days                        15571 non-null  float64\n 66  cases_7days                         15713 non-null  float64\n 67  cases_PCR_14days                    10789 non-null  float64\n 68  cases_PCR_7days                     10910 non-null  float64\n 69  daily_cases                         15655 non-null  float64\n 70  daily_cases_avg7                    14798 non-null  float64\n 71  daily_cases_PCR                     11097 non-null  float64\n 72  daily_cases_PCR_avg7                10664 non-null  float64\n 73  daily_deaths                        16771 non-null  float64\n 74  daily_deaths_hosp_eus               275 non-null    float64\n 75  daily_deaths_inc                    16625 non-null  float64\n 76  daily_deaths_avg3                   16230 non-null  float64\n 77  daily_deaths_avg3_hosp_eus          273 non-null    float64\n 78  deaths_last_week                    18145 non-null  float64\n 79  daily_deaths_avg7                   16663 non-null  float64\n 80  daily_deaths_avg7_hosp_eus          269 non-null    float64\n 81  cases_per_cienmil                   15971 non-null  float64\n 82  intensive_care_per_1000000          14009 non-null  float64\n 83  deceassed_per_100000                16795 non-null  float64\n 84  hospitalized_per_100000             15658 non-null  float64\n 85  ia14                                15539 non-null  float64\ndtypes: float64(78), object(8)\nmemory usage: 12.1+ MB\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n/tmp/ipykernel_18648/59992238.py:2: DtypeWarning:\n\nColumns (36) have mixed types. Specify dtype option on import or set low_memory=False.\n\n```\n:::\n:::\n\n\n::: {.cell execution_count=58}\n``` {.python .cell-code}\ncovid_data.head(n=20)\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>ccaa</th>\n      <th>date</th>\n      <th>new_cases</th>\n      <th>PCR</th>\n      <th>TestAc</th>\n      <th>activos</th>\n      <th>hospitalized</th>\n      <th>hospitalized_new</th>\n      <th>hospitalized_accumulated</th>\n      <th>intensive_care</th>\n      <th>...</th>\n      <th>daily_deaths_avg3</th>\n      <th>daily_deaths_avg3_hosp_eus</th>\n      <th>deaths_last_week</th>\n      <th>daily_deaths_avg7</th>\n      <th>daily_deaths_avg7_hosp_eus</th>\n      <th>cases_per_cienmil</th>\n      <th>intensive_care_per_1000000</th>\n      <th>deceassed_per_100000</th>\n      <th>hospitalized_per_100000</th>\n      <th>ia14</th>\n    </tr>\n    <tr>\n      <th>ine_code</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-01</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-02</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-03</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-04</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-05</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-06</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-07</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-08</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-09</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-10</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-11</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-12</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-13</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-14</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-15</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-16</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-17</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-18</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-19</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Andalucía</td>\n      <td>2020-01-20</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>20 rows × 86 columns</p>\n</div>\n```\n:::\n:::\n\n\nEscribir a fichero `csv`.\n\n::: {.cell execution_count=59}\n``` {.python .cell-code}\ndf.to_csv(\"../data/to_csv.csv\")\n```\n:::\n\n\n## Agrupación de datos de `DataFrame` (`groupBy`)\n\n[Pandas: Agrupación de datos de DataFrames: Método Groupby | 17/71 | UPV - YouTube](https://www.youtube.com/watch?v=SQY8EMWPhIE&list=PL6kQim6ljTJuKxFmALOOwR91m4IL1Z9Dg&index=17)\n\nDatos de [GitHub - owid/covid-19-data: Data on COVID-19 (coronavirus) cases, deaths, hospitalizations, tests • All countries • Updated daily by Our World in Data](https://github.com/owid/covid-19-data)\n\n### Datos\n\n::: {.cell execution_count=60}\n``` {.python .cell-code}\nurl = \"https://covid.ourworldindata.org/data/owid-covid-data.csv\"\ncovid_data = pd.read_csv(url) \n```\n:::\n\n\n::: {.cell execution_count=61}\n``` {.python .cell-code}\ncovid_data.info()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 299317 entries, 0 to 299316\nData columns (total 67 columns):\n #   Column                                      Non-Null Count   Dtype  \n---  ------                                      --------------   -----  \n 0   iso_code                                    299317 non-null  object \n 1   continent                                   285066 non-null  object \n 2   location                                    299317 non-null  object \n 3   date                                        299317 non-null  object \n 4   total_cases                                 263354 non-null  float64\n 5   new_cases                                   290604 non-null  float64\n 6   new_cases_smoothed                          289340 non-null  float64\n 7   total_deaths                                243229 non-null  float64\n 8   new_deaths                                  290686 non-null  float64\n 9   new_deaths_smoothed                         289456 non-null  float64\n 10  total_cases_per_million                     263354 non-null  float64\n 11  new_cases_per_million                       290604 non-null  float64\n 12  new_cases_smoothed_per_million              289340 non-null  float64\n 13  total_deaths_per_million                    243229 non-null  float64\n 14  new_deaths_per_million                      290686 non-null  float64\n 15  new_deaths_smoothed_per_million             289456 non-null  float64\n 16  reproduction_rate                           184817 non-null  float64\n 17  icu_patients                                34601 non-null   float64\n 18  icu_patients_per_million                    34601 non-null   float64\n 19  hosp_patients                               34948 non-null   float64\n 20  hosp_patients_per_million                   34948 non-null   float64\n 21  weekly_icu_admissions                       9023 non-null    float64\n 22  weekly_icu_admissions_per_million           9023 non-null    float64\n 23  weekly_hosp_admissions                      21168 non-null   float64\n 24  weekly_hosp_admissions_per_million          21168 non-null   float64\n 25  total_tests                                 79387 non-null   float64\n 26  new_tests                                   75403 non-null   float64\n 27  total_tests_per_thousand                    79387 non-null   float64\n 28  new_tests_per_thousand                      75403 non-null   float64\n 29  new_tests_smoothed                          103965 non-null  float64\n 30  new_tests_smoothed_per_thousand             103965 non-null  float64\n 31  positive_rate                               95927 non-null   float64\n 32  tests_per_case                              94348 non-null   float64\n 33  tests_units                                 106788 non-null  object \n 34  total_vaccinations                          73199 non-null   float64\n 35  people_vaccinated                           70083 non-null   float64\n 36  people_fully_vaccinated                     67804 non-null   float64\n 37  total_boosters                              42006 non-null   float64\n 38  new_vaccinations                            60237 non-null   float64\n 39  new_vaccinations_smoothed                   162272 non-null  float64\n 40  total_vaccinations_per_hundred              73199 non-null   float64\n 41  people_vaccinated_per_hundred               70083 non-null   float64\n 42  people_fully_vaccinated_per_hundred         67804 non-null   float64\n 43  total_boosters_per_hundred                  42006 non-null   float64\n 44  new_vaccinations_smoothed_per_million       162272 non-null  float64\n 45  new_people_vaccinated_smoothed              162321 non-null  float64\n 46  new_people_vaccinated_smoothed_per_hundred  162321 non-null  float64\n 47  stringency_index                            193194 non-null  float64\n 48  population_density                          253955 non-null  float64\n 49  median_age                                  236208 non-null  float64\n 50  aged_65_older                               227951 non-null  float64\n 51  aged_70_older                               233838 non-null  float64\n 52  gdp_per_capita                              231488 non-null  float64\n 53  extreme_poverty                             149095 non-null  float64\n 54  cardiovasc_death_rate                       231892 non-null  float64\n 55  diabetes_prevalence                         243717 non-null  float64\n 56  female_smokers                              173978 non-null  float64\n 57  male_smokers                                171608 non-null  float64\n 58  handwashing_facilities                      113531 non-null  float64\n 59  hospital_beds_per_thousand                  204719 non-null  float64\n 60  life_expectancy                             275214 non-null  float64\n 61  human_development_index                     224794 non-null  float64\n 62  population                                  299317 non-null  float64\n 63  excess_mortality_cumulative_absolute        10295 non-null   float64\n 64  excess_mortality_cumulative                 10295 non-null   float64\n 65  excess_mortality                            10295 non-null   float64\n 66  excess_mortality_cumulative_per_million     10295 non-null   float64\ndtypes: float64(62), object(5)\nmemory usage: 153.0+ MB\n```\n:::\n:::\n\n\n::: {.cell execution_count=62}\n``` {.python .cell-code}\ncovid_data.head()\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_code</th>\n      <th>continent</th>\n      <th>location</th>\n      <th>date</th>\n      <th>total_cases</th>\n      <th>new_cases</th>\n      <th>new_cases_smoothed</th>\n      <th>total_deaths</th>\n      <th>new_deaths</th>\n      <th>new_deaths_smoothed</th>\n      <th>...</th>\n      <th>male_smokers</th>\n      <th>handwashing_facilities</th>\n      <th>hospital_beds_per_thousand</th>\n      <th>life_expectancy</th>\n      <th>human_development_index</th>\n      <th>population</th>\n      <th>excess_mortality_cumulative_absolute</th>\n      <th>excess_mortality_cumulative</th>\n      <th>excess_mortality</th>\n      <th>excess_mortality_cumulative_per_million</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AFG</td>\n      <td>Asia</td>\n      <td>Afghanistan</td>\n      <td>2020-01-03</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>37.746</td>\n      <td>0.5</td>\n      <td>64.83</td>\n      <td>0.511</td>\n      <td>41128772.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AFG</td>\n      <td>Asia</td>\n      <td>Afghanistan</td>\n      <td>2020-01-04</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>37.746</td>\n      <td>0.5</td>\n      <td>64.83</td>\n      <td>0.511</td>\n      <td>41128772.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AFG</td>\n      <td>Asia</td>\n      <td>Afghanistan</td>\n      <td>2020-01-05</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>37.746</td>\n      <td>0.5</td>\n      <td>64.83</td>\n      <td>0.511</td>\n      <td>41128772.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AFG</td>\n      <td>Asia</td>\n      <td>Afghanistan</td>\n      <td>2020-01-06</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>37.746</td>\n      <td>0.5</td>\n      <td>64.83</td>\n      <td>0.511</td>\n      <td>41128772.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AFG</td>\n      <td>Asia</td>\n      <td>Afghanistan</td>\n      <td>2020-01-07</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>0.0</td>\n      <td>NaN</td>\n      <td>...</td>\n      <td>NaN</td>\n      <td>37.746</td>\n      <td>0.5</td>\n      <td>64.83</td>\n      <td>0.511</td>\n      <td>41128772.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 67 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=63}\n``` {.python .cell-code}\ncovid_data.tail()\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>iso_code</th>\n      <th>continent</th>\n      <th>location</th>\n      <th>date</th>\n      <th>total_cases</th>\n      <th>new_cases</th>\n      <th>new_cases_smoothed</th>\n      <th>total_deaths</th>\n      <th>new_deaths</th>\n      <th>new_deaths_smoothed</th>\n      <th>...</th>\n      <th>male_smokers</th>\n      <th>handwashing_facilities</th>\n      <th>hospital_beds_per_thousand</th>\n      <th>life_expectancy</th>\n      <th>human_development_index</th>\n      <th>population</th>\n      <th>excess_mortality_cumulative_absolute</th>\n      <th>excess_mortality_cumulative</th>\n      <th>excess_mortality</th>\n      <th>excess_mortality_cumulative_per_million</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>299312</th>\n      <td>ZWE</td>\n      <td>Africa</td>\n      <td>Zimbabwe</td>\n      <td>2023-03-25</td>\n      <td>264508.0</td>\n      <td>4.0</td>\n      <td>9.571</td>\n      <td>5679.0</td>\n      <td>0.0</td>\n      <td>0.286</td>\n      <td>...</td>\n      <td>30.7</td>\n      <td>36.791</td>\n      <td>1.7</td>\n      <td>61.49</td>\n      <td>0.571</td>\n      <td>16320539.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>299313</th>\n      <td>ZWE</td>\n      <td>Africa</td>\n      <td>Zimbabwe</td>\n      <td>2023-03-26</td>\n      <td>264509.0</td>\n      <td>1.0</td>\n      <td>8.714</td>\n      <td>5679.0</td>\n      <td>0.0</td>\n      <td>0.143</td>\n      <td>...</td>\n      <td>30.7</td>\n      <td>36.791</td>\n      <td>1.7</td>\n      <td>61.49</td>\n      <td>0.571</td>\n      <td>16320539.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>299314</th>\n      <td>ZWE</td>\n      <td>Africa</td>\n      <td>Zimbabwe</td>\n      <td>2023-03-27</td>\n      <td>264511.0</td>\n      <td>2.0</td>\n      <td>7.857</td>\n      <td>5679.0</td>\n      <td>0.0</td>\n      <td>0.143</td>\n      <td>...</td>\n      <td>30.7</td>\n      <td>36.791</td>\n      <td>1.7</td>\n      <td>61.49</td>\n      <td>0.571</td>\n      <td>16320539.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>299315</th>\n      <td>ZWE</td>\n      <td>Africa</td>\n      <td>Zimbabwe</td>\n      <td>2023-03-28</td>\n      <td>264511.0</td>\n      <td>0.0</td>\n      <td>5.857</td>\n      <td>5679.0</td>\n      <td>0.0</td>\n      <td>0.143</td>\n      <td>...</td>\n      <td>30.7</td>\n      <td>36.791</td>\n      <td>1.7</td>\n      <td>61.49</td>\n      <td>0.571</td>\n      <td>16320539.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>299316</th>\n      <td>ZWE</td>\n      <td>Africa</td>\n      <td>Zimbabwe</td>\n      <td>2023-03-29</td>\n      <td>264511.0</td>\n      <td>0.0</td>\n      <td>5.143</td>\n      <td>5679.0</td>\n      <td>0.0</td>\n      <td>0.000</td>\n      <td>...</td>\n      <td>30.7</td>\n      <td>36.791</td>\n      <td>1.7</td>\n      <td>61.49</td>\n      <td>0.571</td>\n      <td>16320539.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>5 rows × 67 columns</p>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=64}\n``` {.python .cell-code}\nmin_date = covid_data.date.min()\nmax_date = covid_data.date.max()\nprint(f\"Datos del {min_date} al {max_date}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nDatos del 2020-01-01 al 2023-04-04\n```\n:::\n:::\n\n\n### Método `DataFrame.groupby()`\n\n::: {.cell execution_count=65}\n``` {.python .cell-code}\ncovid_data_by_continent = covid_data.loc[covid_data.date < \"2023\"].groupby(by=\"continent\")\n```\n:::\n\n\nResumen por continente.\n\n::: {.cell execution_count=66}\n``` {.python .cell-code}\ncovid_data_by_continent.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th></th>\n      <th colspan=\"8\" halign=\"left\">total_cases</th>\n      <th colspan=\"2\" halign=\"left\">new_cases</th>\n      <th>...</th>\n      <th colspan=\"2\" halign=\"left\">excess_mortality</th>\n      <th colspan=\"8\" halign=\"left\">excess_mortality_cumulative_per_million</th>\n    </tr>\n    <tr>\n      <th></th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>...</th>\n      <th>75%</th>\n      <th>max</th>\n      <th>count</th>\n      <th>mean</th>\n      <th>std</th>\n      <th>min</th>\n      <th>25%</th>\n      <th>50%</th>\n      <th>75%</th>\n      <th>max</th>\n    </tr>\n    <tr>\n      <th>continent</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Africa</th>\n      <td>57201.0</td>\n      <td>1.228130e+05</td>\n      <td>3.888307e+05</td>\n      <td>1.0</td>\n      <td>5604.0</td>\n      <td>20651.0</td>\n      <td>85887.0</td>\n      <td>4048580.0</td>\n      <td>62353.0</td>\n      <td>208.506808</td>\n      <td>...</td>\n      <td>23.865</td>\n      <td>219.44</td>\n      <td>612.0</td>\n      <td>1073.652589</td>\n      <td>1459.501685</td>\n      <td>-1620.1620</td>\n      <td>-2.972592</td>\n      <td>649.07532</td>\n      <td>1425.119650</td>\n      <td>4781.3230</td>\n    </tr>\n    <tr>\n      <th>Asia</th>\n      <td>46901.0</td>\n      <td>1.688478e+06</td>\n      <td>5.321809e+06</td>\n      <td>1.0</td>\n      <td>22842.0</td>\n      <td>218259.0</td>\n      <td>859203.0</td>\n      <td>84925042.0</td>\n      <td>51392.0</td>\n      <td>5346.522182</td>\n      <td>...</td>\n      <td>21.245</td>\n      <td>265.97</td>\n      <td>1227.0</td>\n      <td>873.653081</td>\n      <td>1354.284135</td>\n      <td>-667.1582</td>\n      <td>3.576511</td>\n      <td>381.06985</td>\n      <td>1214.856200</td>\n      <td>8110.9970</td>\n    </tr>\n    <tr>\n      <th>Europe</th>\n      <td>53091.0</td>\n      <td>1.736043e+06</td>\n      <td>4.586706e+06</td>\n      <td>1.0</td>\n      <td>12648.0</td>\n      <td>203866.0</td>\n      <td>1179598.5</td>\n      <td>38199813.0</td>\n      <td>55789.0</td>\n      <td>4356.673825</td>\n      <td>...</td>\n      <td>16.300</td>\n      <td>157.23</td>\n      <td>5316.0</td>\n      <td>1598.790612</td>\n      <td>1968.237540</td>\n      <td>-1693.2815</td>\n      <td>44.493918</td>\n      <td>1022.55900</td>\n      <td>2426.921750</td>\n      <td>10245.5880</td>\n    </tr>\n    <tr>\n      <th>North America</th>\n      <td>41937.0</td>\n      <td>1.316721e+06</td>\n      <td>8.735096e+06</td>\n      <td>1.0</td>\n      <td>809.0</td>\n      <td>9256.0</td>\n      <td>90705.0</td>\n      <td>99411696.0</td>\n      <td>44840.0</td>\n      <td>2663.096253</td>\n      <td>...</td>\n      <td>20.520</td>\n      <td>343.02</td>\n      <td>1489.0</td>\n      <td>1298.160612</td>\n      <td>1558.219477</td>\n      <td>-1984.2816</td>\n      <td>40.592667</td>\n      <td>675.01510</td>\n      <td>2531.535200</td>\n      <td>5388.7114</td>\n    </tr>\n    <tr>\n      <th>Oceania</th>\n      <td>15461.0</td>\n      <td>2.079076e+05</td>\n      <td>1.187275e+06</td>\n      <td>1.0</td>\n      <td>31.0</td>\n      <td>3430.0</td>\n      <td>18387.0</td>\n      <td>10785559.0</td>\n      <td>26256.0</td>\n      <td>507.388521</td>\n      <td>...</td>\n      <td>6.230</td>\n      <td>276.24</td>\n      <td>363.0</td>\n      <td>-62.319967</td>\n      <td>398.894842</td>\n      <td>-549.3467</td>\n      <td>-382.086590</td>\n      <td>-104.82968</td>\n      <td>3.395352</td>\n      <td>1844.1776</td>\n    </tr>\n    <tr>\n      <th>South America</th>\n      <td>14377.0</td>\n      <td>2.351283e+06</td>\n      <td>5.780549e+06</td>\n      <td>1.0</td>\n      <td>23609.0</td>\n      <td>376579.0</td>\n      <td>1530593.0</td>\n      <td>36302415.0</td>\n      <td>15309.0</td>\n      <td>4362.155399</td>\n      <td>...</td>\n      <td>34.290</td>\n      <td>377.04</td>\n      <td>943.0</td>\n      <td>1924.056211</td>\n      <td>1749.222585</td>\n      <td>-715.9340</td>\n      <td>274.812665</td>\n      <td>1728.99900</td>\n      <td>3448.166400</td>\n      <td>5538.5840</td>\n    </tr>\n  </tbody>\n</table>\n<p>6 rows × 496 columns</p>\n</div>\n```\n:::\n:::\n\n\nSuma de nuevos casos por continente.\n\n::: {.cell execution_count=67}\n``` {.python .cell-code}\ncovid_data_by_continent[\"new_cases\"].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```\ncontinent\nAfrica            13001025.0\nAsia             274768468.0\nEurope           243054476.0\nNorth America    119413236.0\nOceania           13321993.0\nSouth America     66780237.0\nName: new_cases, dtype: float64\n```\n:::\n:::\n\n\nDebería coincidir con casos totales\n\n::: {.cell execution_count=68}\n``` {.python .cell-code}\ncovid_data[covid_data.date == \"2022-12-31\"].groupby(by=\"continent\")[\"total_cases\"].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```\ncontinent\nAfrica            12999907.0\nAsia             274767650.0\nEurope           243054440.0\nNorth America    119412837.0\nOceania           13321993.0\nSouth America     66767373.0\nName: total_cases, dtype: float64\n```\n:::\n:::\n\n\nSuma de nuevos casos y de nuevas vacunas por continente.\n\n::: {.cell execution_count=69}\n``` {.python .cell-code}\ncovid_data_by_continent[[\"new_cases\", \"new_vaccinations\"]].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=69}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>new_cases</th>\n      <th>new_vaccinations</th>\n    </tr>\n    <tr>\n      <th>continent</th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Africa</th>\n      <td>13001025.0</td>\n      <td>1.173652e+08</td>\n    </tr>\n    <tr>\n      <th>Asia</th>\n      <td>274768468.0</td>\n      <td>7.510216e+09</td>\n    </tr>\n    <tr>\n      <th>Europe</th>\n      <td>243054476.0</td>\n      <td>1.261467e+09</td>\n    </tr>\n    <tr>\n      <th>North America</th>\n      <td>119413236.0</td>\n      <td>9.855153e+08</td>\n    </tr>\n    <tr>\n      <th>Oceania</th>\n      <td>13321993.0</td>\n      <td>7.444607e+07</td>\n    </tr>\n    <tr>\n      <th>South America</th>\n      <td>66780237.0</td>\n      <td>8.344368e+08</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nMáximo de nuevos casos por millon por país. \n\n::: {.cell execution_count=70}\n``` {.python .cell-code}\nmax_by_continent = covid_data_by_continent[\"new_cases_per_million\"].max()\nmax_by_continent\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```\ncontinent\nAfrica           157193.112\nAsia              27661.347\nEurope            46361.067\nNorth America     98045.879\nOceania          228872.025\nSouth America    193107.077\nName: new_cases_per_million, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=71}\n``` {.python .cell-code}\nmax_by_continent.sort_values()\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```\ncontinent\nAsia              27661.347\nEurope            46361.067\nNorth America     98045.879\nAfrica           157193.112\nSouth America    193107.077\nOceania          228872.025\nName: new_cases_per_million, dtype: float64\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pandas_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}