{
  "hash": "383e0a9c8a6b60555510316289a0fa12",
  "result": {
    "markdown": "# Estadística Descriptiva\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n```\n:::\n\n\n[Descriptive Statistics — pandas 2.0.0 documentation](https://pandas.pydata.org/pandas-docs/stable/user_guide/basics.html#descriptive-statistics)\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndf = pd.DataFrame(\n    index = [\"Enero\", \"Febrero\", \"Marzo\"],\n    columns = [\n        \"Casos\", \"UCI\", \"Fallecidos\"\n    ],\n    data = [\n        (10, 1, 2),\n        (40, 3, 4),\n        (30, 5, 0)\n    ]\n)\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndf2 = pd.DataFrame(\n    columns=[\"factor1\", \"factor2\", \"factor3\"],\n    data = [\n        (\"A\",\"a\", \"x\"),\n        (\"B\",\"c\", \"y\"),\n        (\"A\",\"c\", \"x\"),\n        (\"A\",\"a\", \"y\"),\n        (\"A\",\"a\", \"x\"),\n        (\"B\",\"b\", \"y\"),\n        (\"B\",\"b\", \"x\")\n    ]\n)\ndf2\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>factor1</th>\n      <th>factor2</th>\n      <th>factor3</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>A</td>\n      <td>a</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>B</td>\n      <td>c</td>\n      <td>y</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A</td>\n      <td>c</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>A</td>\n      <td>a</td>\n      <td>y</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>A</td>\n      <td>a</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>B</td>\n      <td>b</td>\n      <td>y</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>B</td>\n      <td>b</td>\n      <td>x</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Funciones predefinidas para variables numéricas\n\nFunciones como `min`, `max`, `mean`, `var`, `std` ... se pueden aplicar a una sola variable, a varias variables o a todas las variables de la hoja de datos.  \n\n\nMínimo de una variable, dos variables y todas las variables. \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\ndf.Casos.min()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n10\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ndf[[\"Casos\",\"UCI\"]].min()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nCasos    10\nUCI       1\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\ndf.min()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nCasos         10\nUCI            1\nFallecidos     0\ndtype: int64\n```\n:::\n:::\n\n\nCuantiles de una variable, dos variables y todas las variables. \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\ndf.Casos.quantile(0.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n38.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf.Casos.quantile([0.25, 0.5, 0.75])\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n0.25    20.0\n0.50    30.0\n0.75    35.0\nName: Casos, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\ndf[[\"Casos\",\"UCI\"]].quantile(0.9)\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nCasos    38.0\nUCI       4.6\nName: 0.9, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\ndf[[\"Casos\",\"UCI\"]].quantile([0.25, 0.5, 0.75])\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.25</th>\n      <td>20.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>0.50</th>\n      <td>30.0</td>\n      <td>3.0</td>\n    </tr>\n    <tr>\n      <th>0.75</th>\n      <td>35.0</td>\n      <td>4.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\ndf.quantile([0.25, 0.5, 0.75])\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n      <th>Fallecidos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0.25</th>\n      <td>20.0</td>\n      <td>2.0</td>\n      <td>1.0</td>\n    </tr>\n    <tr>\n      <th>0.50</th>\n      <td>30.0</td>\n      <td>3.0</td>\n      <td>2.0</td>\n    </tr>\n    <tr>\n      <th>0.75</th>\n      <td>35.0</td>\n      <td>4.0</td>\n      <td>3.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### El combo `describe`\n\nDescriptivos de una variable, dos variables y todas las variables. \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ndf[\"Casos\"].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\ncount     3.000000\nmean     26.666667\nstd      15.275252\nmin      10.000000\n25%      20.000000\n50%      30.000000\n75%      35.000000\nmax      40.000000\nName: Casos, dtype: float64\n```\n:::\n:::\n\n\nOpción para ver solo dos decimales\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\npd.set_option(\"display.float_format\", \"{:.2f}\".format)\n```\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\ndf[\"Casos\"].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\ncount    3.00\nmean    26.67\nstd     15.28\nmin     10.00\n25%     20.00\n50%     30.00\n75%     35.00\nmax     40.00\nName: Casos, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\ndf[[\"Casos\", \"UCI\"]].describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.00</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>26.67</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>15.28</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>10.00</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>20.00</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>30.00</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>35.00</td>\n      <td>4.00</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>40.00</td>\n      <td>5.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\ndf.describe()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n      <th>Fallecidos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>3.00</td>\n      <td>3.00</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>26.67</td>\n      <td>3.00</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>15.28</td>\n      <td>2.00</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>10.00</td>\n      <td>1.00</td>\n      <td>0.00</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>20.00</td>\n      <td>2.00</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>30.00</td>\n      <td>3.00</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>35.00</td>\n      <td>4.00</td>\n      <td>3.00</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>40.00</td>\n      <td>5.00</td>\n      <td>4.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## Funciones predefinidas para variables categóricas\n\n\n### Número de niveles\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\ndf2[\"factor1\"].nunique()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\n2\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\ndf2[[\"factor1\", \"factor2\"]].nunique()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\nfactor1    2\nfactor2    3\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=19}\n``` {.python .cell-code}\ndf2.nunique()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\nfactor1    2\nfactor2    3\nfactor3    2\ndtype: int64\n```\n:::\n:::\n\n\n### Niveles \n\n::: {.cell execution_count=20}\n``` {.python .cell-code}\ndf2[\"factor1\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\narray(['A', 'B'], dtype=object)\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ndf2[\"factor2\"].unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\narray(['a', 'c', 'b'], dtype=object)\n```\n:::\n:::\n\n\n### Tablas de frecuencias\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\ndf2[\"factor1\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```\nA    4\nB    3\nName: factor1, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\ndf2[\"factor2\"].value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```\na    3\nc    2\nb    2\nName: factor2, dtype: int64\n```\n:::\n:::\n\n\n## El método `apply()`\n\nPara otras funciones no predefinidas usar `apply`. El siguiente ejemplo hace la suma de los valores de las variables excluyendo el último valor. \n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\ndef xsum(v): \n    return np.sum(v[:-1])\n```\n:::\n\n\n::: {.cell execution_count=25}\n``` {.python .cell-code}\ndf[[\"Casos\"]].apply(xsum) # Sólo aplica a DataFrame df[\"Casos\"].apply(xsum) da error\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\nCasos    50\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ndf[[\"Casos\", \"UCI\"]].apply(xsum)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```\nCasos    50\nUCI       4\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=27}\n``` {.python .cell-code}\ndf.apply(xsum)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```\nCasos         50\nUCI            4\nFallecidos     6\ndtype: int64\n```\n:::\n:::\n\n\nTodo lo que se puede hacer con `apply()` se puede hacer con [`agg()`](#sec-agg).\n\n## El método `agg()` {#sec-agg}\n\n\n[pandas.DataFrame.agg — pandas 2.0.0 documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.agg.html)\n\nSimilar a `apply`, pero mucho más versátil: se  puede aplicar una función diferente a cada columna.\n\n### Si el argumento `func` es una función es equivalente a `apply`\n\n::: {.cell execution_count=28}\n``` {.python .cell-code}\ndf[[\"Casos\"]].agg(sum) \n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```\nCasos    80\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=29}\n``` {.python .cell-code}\ndf[[\"Casos\"]].apply(sum) \n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nCasos    80\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=30}\n``` {.python .cell-code}\ndf[[\"Casos\", \"UCI\"]].agg(sum)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nCasos    80\nUCI       9\ndtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=31}\n``` {.python .cell-code}\ndf[[\"Casos\", \"UCI\"]].apply(sum)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```\nCasos    80\nUCI       9\ndtype: int64\n```\n:::\n:::\n\n\n### Pero el argumento `func` puede ser un diccionario que aplica una función diferente a cada columna\n\nUna de las opciones para el parámetro `func` que se describe en la documentación es\n\n> dict of axis labels -> functions, function names or list of such.\n\n::: {.cell execution_count=32}\n``` {.python .cell-code}\ndf[[\"Casos\", \"UCI\"]].agg({\n    \"Casos\": sum,\n    \"UCI\": np.mean\n})\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```\nCasos   80.00\nUCI      3.00\ndtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=33}\n``` {.python .cell-code}\ndf.agg({\n    \"Casos\": sum,\n    \"UCI\": np.mean,\n    \"Fallecidos\": xsum\n})\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```\nCasos        80.00\nUCI           3.00\nFallecidos    6.00\ndtype: float64\n```\n:::\n:::\n\n\nLa función puede ser escalar\n\n::: {.cell execution_count=34}\n``` {.python .cell-code}\ndf.agg(np.sqrt)\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n      <th>Fallecidos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Enero</th>\n      <td>3.16</td>\n      <td>1.00</td>\n      <td>1.41</td>\n    </tr>\n    <tr>\n      <th>Febrero</th>\n      <td>6.32</td>\n      <td>1.73</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>Marzo</th>\n      <td>5.48</td>\n      <td>2.24</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n###  Y además se puede cambiar el índice (Named aggregation)\n\nUsando `func=None` y `kwargs` se puede aplicar una función diferente a cada variable y además renombrar el índice. \n\n> Aggregate different functions over the columns and rename the index of the resulting DataFrame.\n\n::: {.cell execution_count=35}\n``` {.python .cell-code}\ndf_docs = pd.DataFrame([[1, 2, 3],\n                   [4, 5, 6],\n                   [7, 8, 9],\n                   [np.nan, np.nan, np.nan]],\n                  columns=['A', 'B', 'C'])\n```\n:::\n\n\n::: {.cell execution_count=36}\n``` {.python .cell-code}\ndf_docs.agg(x=('A', max), y=('B', 'min'), z=('C', np.mean))\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>A</th>\n      <th>B</th>\n      <th>C</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>x</th>\n      <td>7.00</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>y</th>\n      <td>NaN</td>\n      <td>2.00</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>z</th>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>6.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nAl principio no entendía el ejemplo anterior, pero al leer los comentarios en el código <https://github.com/pandas-dev/pandas/blob/478d340667831908b5b4bf09a2787a11a14560c9/pandas/core/apply.py#L1152> entendí que realmente en el ejemplo anterior los argumentos son `kwargs` y `func=None`. Y según los comentarios del código en este caso se hace lo siguiente:\n\n> If named aggregation is applied, `func` will be None, and kwargs contains the\n    column and aggregation function information to be parsed;\n\n\n\n\n\n\n## Aplicar funciones a las filas de una hoja de datos\n\nLos métodos predefinidos que se han visto antes y los métodos `apply` y `agg` tienen un argumento `axis`, que indica si se quiere aplicar la función por filas o por columnas. Por defecto vale `0`, que indica que la función se aplica a cada columna. Para aplicar la función a cada fila usar `axis = 1`.\n\n::: {.cell execution_count=37}\n``` {.python .cell-code}\ndf.sum(axis = 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```\nEnero      13\nFebrero    47\nMarzo      35\ndtype: int64\n```\n:::\n:::\n\n\n## Aplicar funciones elemento a elemento\n\nPara aplicar funciones elemento a elemento se usa el método `applymap`\n\n::: {.cell execution_count=38}\n``` {.python .cell-code}\ndf[[\"Casos\"]].applymap(np.sqrt) # equivalente a np.sqrt(df\"Casos\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Enero</th>\n      <td>3.16</td>\n    </tr>\n    <tr>\n      <th>Febrero</th>\n      <td>6.32</td>\n    </tr>\n    <tr>\n      <th>Marzo</th>\n      <td>5.48</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=39}\n``` {.python .cell-code}\ndf[[\"Casos\"]].applymap(lambda x: x**2) # equivalente a df[\"Casos\"]**2\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Enero</th>\n      <td>100</td>\n    </tr>\n    <tr>\n      <th>Febrero</th>\n      <td>1600</td>\n    </tr>\n    <tr>\n      <th>Marzo</th>\n      <td>900</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=40}\n``` {.python .cell-code}\ndf[[\"Casos\", \"UCI\"]].applymap(np.sqrt)\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Enero</th>\n      <td>3.16</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <th>Febrero</th>\n      <td>6.32</td>\n      <td>1.73</td>\n    </tr>\n    <tr>\n      <th>Marzo</th>\n      <td>5.48</td>\n      <td>2.24</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=41}\n``` {.python .cell-code}\ndf.applymap(np.sqrt)\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n      <th>Fallecidos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Enero</th>\n      <td>3.16</td>\n      <td>1.00</td>\n      <td>1.41</td>\n    </tr>\n    <tr>\n      <th>Febrero</th>\n      <td>6.32</td>\n      <td>1.73</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>Marzo</th>\n      <td>5.48</td>\n      <td>2.24</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nEn realidad `apply` y `agg` harían lo mismo. \n\n::: {.cell execution_count=42}\n``` {.python .cell-code}\ndf.apply(np.sqrt)\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n      <th>Fallecidos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Enero</th>\n      <td>3.16</td>\n      <td>1.00</td>\n      <td>1.41</td>\n    </tr>\n    <tr>\n      <th>Febrero</th>\n      <td>6.32</td>\n      <td>1.73</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>Marzo</th>\n      <td>5.48</td>\n      <td>2.24</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=43}\n``` {.python .cell-code}\ndf.agg(np.sqrt)\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Casos</th>\n      <th>UCI</th>\n      <th>Fallecidos</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Enero</th>\n      <td>3.16</td>\n      <td>1.00</td>\n      <td>1.41</td>\n    </tr>\n    <tr>\n      <th>Febrero</th>\n      <td>6.32</td>\n      <td>1.73</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <th>Marzo</th>\n      <td>5.48</td>\n      <td>2.24</td>\n      <td>0.00</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n## El método `transform()`\n\n[pandas.DataFrame.transform — pandas 2.0.0 documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.transform.html)\n\nDevuelve una hoja de datos de las mismas dimensiones. \n\n### `group_by().transform()`\n\nLo interesante es cómo se aplica a objetos `GroupBy`.\n\n- [pandas.core.groupby.SeriesGroupBy.transform — pandas 2.0.0 documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.SeriesGroupBy.transform.html#pandas.core.groupby.SeriesGroupBy.transform)\n\n- [pandas.core.groupby.DataFrameGroupBy.transform — pandas 2.0.0 documentation](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.core.groupby.DataFrameGroupBy.transform.html#pandas.core.groupby.DataFrameGroupBy.transform)\n\n::: {.cell execution_count=44}\n``` {.python .cell-code}\ndf_to_transform = pd.DataFrame({\n    \"Date\": [\n        \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\",\n        \"2015-05-08\", \"2015-05-07\", \"2015-05-06\", \"2015-05-05\"],\n    \"Data\": [5, 8, 6, 1, 50, 100, 60, 120],\n})\n```\n:::\n\n\n::: {.cell execution_count=45}\n``` {.python .cell-code}\ndf_to_transform.groupby('Date')['Data'].transform('sum')\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```\n0     55\n1    108\n2     66\n3    121\n4     55\n5    108\n6     66\n7    121\nName: Data, dtype: int64\n```\n:::\n:::\n\n\nSin embargo este ejemplo aplicado a hoja de datos sin agrupar da error `ValueError: Function did not transform`:\n\n::: {.cell execution_count=46}\n``` {.python .cell-code}\ndf_to_transform['Data'].transform('sum') # ValueError: Function did not transform\n```\n:::\n\n\n## Tablas de contingencia\n\n::: {.cell execution_count=47}\n``` {.python .cell-code}\npd.crosstab(df2[\"factor1\"], df2[\"factor2\"])\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th>factor2</th>\n      <th>a</th>\n      <th>b</th>\n      <th>c</th>\n    </tr>\n    <tr>\n      <th>factor1</th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>A</th>\n      <td>3</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>B</th>\n      <td>0</td>\n      <td>2</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=48}\n``` {.python .cell-code}\npd.crosstab(\n    df2[\"factor1\"], \n    [df2[\"factor2\"], df2[\"factor3\"]]\n)\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr>\n      <th>factor2</th>\n      <th colspan=\"2\" halign=\"left\">a</th>\n      <th colspan=\"2\" halign=\"left\">b</th>\n      <th colspan=\"2\" halign=\"left\">c</th>\n    </tr>\n    <tr>\n      <th>factor3</th>\n      <th>x</th>\n      <th>y</th>\n      <th>x</th>\n      <th>y</th>\n      <th>x</th>\n      <th>y</th>\n    </tr>\n    <tr>\n      <th>factor1</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>A</th>\n      <td>2</td>\n      <td>1</td>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>B</th>\n      <td>0</td>\n      <td>0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>0</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "descriptive_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}