{
  "hash": "030b9c50214a9e38b7611ada91a6983a",
  "result": {
    "markdown": "---\ntitle: Una variable categórica\neditor:\n    render-on-save: true\n---\n\n\n## El método `describe()`\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nspecies = penguins[[\"species\"]]\n```\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nspecies.describe()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Usuario\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning:\n\nIn future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=tex}\n\\begin{tabular}{ll}\n\\toprule\n{} & species \\\\\n\\midrule\ncount  &     344 \\\\\nunique &       3 \\\\\ntop    &  Adelie \\\\\nfreq   &     152 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n- [ ] Decir las funciones individuales.\n\n- [ ] ¿Hay diferencia entre convertirla a categórica (`astype(\"category\")`) o no ?\n\n## Tabla de frecuencias \n\nTabla de frecuencias absolutas:\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nspecies_counts = penguins.value_counts(subset=\"species\")\nspecies_counts\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Usuario\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning:\n\nIn future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &    0 \\\\\nspecies   &      \\\\\n\\midrule\nAdelie    &  152 \\\\\nGentoo    &  124 \\\\\nChinstrap &   68 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\ntype(species_counts)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\npandas.core.series.Series\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nspecies_counts.index\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nIndex(['Adelie', 'Gentoo', 'Chinstrap'], dtype='object', name='species')\n```\n:::\n:::\n\n\n::: {#exr-1categorial-sex-counts}\nDetermina el número total de hembras y de machos. Almacena el resultado en una variable de nombre `sex_counts`.\n:::\n\nTabla de frecuencias relativas (proporciones):\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nspecies_props = penguins.value_counts(\n    subset=\"species\",\n    normalize=True\n)\nspecies_props\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\Usuario\\AppData\\Local\\Programs\\Python\\Python310\\lib\\site-packages\\IPython\\core\\formatters.py:343: FutureWarning:\n\nIn future versions `DataFrame.to_latex` is expected to utilise the base implementation of `Styler.to_latex` for formatting and rendering. The arguments signature may therefore change. It is recommended instead to use `DataFrame.style.to_latex` which also contains additional functionality.\n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &         0 \\\\\nspecies   &           \\\\\n\\midrule\nAdelie    &  0.441860 \\\\\nGentoo    &  0.360465 \\\\\nChinstrap &  0.197674 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\nTabla de porcentajes:\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\n100*species_props\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=tex}\n\\begin{tabular}{lr}\n\\toprule\n{} &          0 \\\\\nspecies   &            \\\\\n\\midrule\nAdelie    &  44.186047 \\\\\nGentoo    &  36.046512 \\\\\nChinstrap &  19.767442 \\\\\n\\bottomrule\n\\end{tabular}\n```\n:::\n:::\n\n\n## Diagrama de barras con `pandas`\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nspecies_counts.plot.bar();\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-10-output-1.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nspecies_counts.plot.barh();\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-11-output-1.pdf){}\n:::\n:::\n\n\n::: {#exr-1categorial-pd-sex-bar}\nUsa la variable `sex_counts` creada en el @exr-1categorial-sex-counts para crear un diagrama de barras mostrando el número total de hembras y de machos.\n:::\n\n::: {#exr-1categorial-pd-island}\nDetermina cuántos pingüinos hay en cada isla y dibuja un diagrama de barras con los resultados.\n:::\n\n\n## Diagrama de barras con `seaborn`\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nsns.barplot(x=species_counts.index, y=species_counts);\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-12-output-1.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nsns.countplot(data=penguins, x=\"species\");\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-13-output-1.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nsns.countplot(data=penguins, x=\"species\", order = ['Chinstrap', 'Adelie', 'Gentoo']);\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-14-output-1.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nsns.countplot(data=penguins, x=\"species\", order = species_counts.index);\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-15-output-1.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nsns.countplot(data=penguins, y=\"species\");\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-16-output-1.pdf){}\n:::\n:::\n\n\n::: {#exr-1categorial-sns-countplot}\nUtiliza la función `countplot()`{.python} de la librería `seaborn`{.python} para crear diagramas de barras para\n\n- el número de hembras y machos\n- el número de pingüinos en cada isla\n\nsin crear previamente tablas de recuentos.\n:::\n\n### Personalización de los gráficos\n\nNo es difícil personalizar los gráficos indicando títulos y colores [^colors]. Por ejemplo:\n<!-- ```{python}\n#| fig-align: center\nax = species_counts.plot.bar(color=[\"tab:blue\", \"tab:orange\", \"tab:green\"])\nax.set(\n    title=\"Número de pingüinos de cada especie\",\n    xlabel=\"Especie\", \n    ylabel=\"Número de pingüinos\"\n);\n``` -->\n\n<!-- palette: deep, muted, pastel, bright, dark, and colorblind -->\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nsns.countplot(data=penguins, x=\"species\", color=\"steelblue\");\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-17-output-1.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nsns.countplot(data=penguins, x=\"species\", palette=[\"steelblue\", \"coral\", \"gold\"]);\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-18-output-1.pdf){}\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nax = sns.countplot(data=penguins, x=\"species\", palette=\"pastel\")\nax.set(\n    title=\"Número de pingüinos de cada especie\",\n    xlabel=\"Especie\", \n    ylabel=\"Número de pingüinos\"\n);\n```\n\n::: {.cell-output .cell-output-display}\n![](1categorical_files/figure-pdf/cell-19-output-1.pdf){fig-align='center'}\n:::\n:::\n\n\nLa personalización de los gráficos no carece de importancia, siendo especialmente relevante dar títulos descriptivos a los ejes. No obstante, en esta práctica nos centraremos en los procedimientos para realizar los gráficos y en la mayoría de ocasiones omitiremos los detalles de personalización de los mismos, que pueden consultarse en la documentación de las librerías usadas. \n\n[^colors]: Puedes ver los colores disponibles [aquí](https://matplotlib.org/stable/tutorials/colors/colors.html).\n\n",
    "supporting": [
      "1categorical_files\\figure-pdf"
    ],
    "filters": []
  }
}