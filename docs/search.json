[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Exploración y visualización de datos con Python",
    "section": "",
    "text": "Inicio\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/intro.html#los-pingüinos-del-archipiélago-palmer",
    "href": "chapters/intro.html#los-pingüinos-del-archipiélago-palmer",
    "title": "Introducción",
    "section": "Los pingüinos del archipiélago Palmer",
    "text": "Los pingüinos del archipiélago Palmer\nPresentaremos las diferentes técnicas a través de ejemplos trabajando con un conjunto de datos relativos a diferentes características de tres especies de pingüinos del archipiélago Palmer en la Antártida.\n\n\n\nIlustración de las tres especies de pingüinos del archipiélago Palmer (Artista @allison_horst)\n\n\nLos datos fueron originalmente publicados en Gorman, Williams, y Fraser (2014). Este conjunto de datos se hizo popular a partir de la creación del paquete palmerpenguins de R. Hoy en día los datos de los pingüinos del archipiélago Palmer se usan de forma extendida para ilustrar las técnicas de exploración y visualización de datos no solo en R, sino en muchos otros lenguajes de programación para estadística y ciencia de datos, como Python. Nosotros accederemos a los datos a través de este enlace, que proporciona los datos en formato CSV (comma separated values)."
  },
  {
    "objectID": "chapters/intro.html#objetivos",
    "href": "chapters/intro.html#objetivos",
    "title": "Introducción",
    "section": "Objetivos",
    "text": "Objetivos\nAprenderás en concreto a calcular las medidas descriptivas más representativas de las características de interés y a crear diferentes tipos de gráficos o visualizaciones.\n\n\n\n\nGorman, KB, TD Williams, y WR Fraser. 2014. «Ecological Sexual Dimorphism and Environmental Variability within a Community of Antarctic Penguins (Genus Pygoscelis)». PLoS ONE 9 (3). https://doi.org/https://doi.org/10.1371/journal.pone.0090081.\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/libraries.html#pandas",
    "href": "chapters/libraries.html#pandas",
    "title": "1  Librerías",
    "section": "1.1 pandas",
    "text": "1.1 pandas\n\n\n\n\n\npandas es una librería que permite leer datos almacenados en estructuras similares a una tabla, como las hojas de cálculo o los archivos CSV, y proporciona métodos para explorar y describir esos datos.\nUsando esta librería podremos calcular por ejemplo el peso medio de los pingüinos de cada especie. Obtendremos esta tabla:\n\n\nspecies\nAdelie       3700.662252\nChinstrap    3733.088235\nGentoo       5076.016260\nName: body_mass_g, dtype: float64\n\n\nPuedes consultar la documentación oficial de pandas aquí."
  },
  {
    "objectID": "chapters/libraries.html#numpy",
    "href": "chapters/libraries.html#numpy",
    "title": "1  Librerías",
    "section": "1.2 numpy",
    "text": "1.2 numpy"
  },
  {
    "objectID": "chapters/data.html#importar-los-datos",
    "href": "chapters/data.html#importar-los-datos",
    "title": "2  Datos",
    "section": "2.1 Importar los datos",
    "text": "2.1 Importar los datos\nComo se indicó en la introducción, los datos con los que vamos a trabajar están disponibles en la web en un fichero de formato CSV.\nEjecuta las instrucciones a continuación para importar el archivo usando la función read_csv() y guardar el resultado en una variable de nombre penguins:\n\nurl = \"https://raw.githubusercontent.com/mwaskom/seaborn-data/master/penguins.csv\"\npenguins = pd.read_csv(url)\n\nEl objeto penguins que acabas de crear es una hoja de datos, representada en pandas con la clase DataFrame.\n\ntype(penguins)\n\npandas.core.frame.DataFrame\n\n\nEn los siguientes apartados aprenderás a realizar una exploración inicial de la hoja de datos penguins que acabas de crear para conocer su estructura y la información que contiene."
  },
  {
    "objectID": "chapters/data.html#dimensiones",
    "href": "chapters/data.html#dimensiones",
    "title": "2  Datos",
    "section": "2.2 Dimensiones",
    "text": "2.2 Dimensiones\nUna hoja de datos es una estructura matricial o tabular que contiene datos organizados por filas y columnas.\nPara saber las dimensiones de nuestra hoja de datos penguins consulta su propiedad shape:\n\npenguins.shape\n\n(344, 7)\n\n\nVemos que nuestra hoja de datos tiene 344 filas y 7 columnas."
  },
  {
    "objectID": "chapters/data.html#visualización",
    "href": "chapters/data.html#visualización",
    "title": "2  Datos",
    "section": "2.3 Visualización",
    "text": "2.3 Visualización\nCon las siguientes instrucciones puedes visualizar las cinco primeras y últimas filas de la hoja de datos penguins que acabas de crear.\n\npenguins.head(5)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMALE\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n\n\n\n\n\n\n\n\npenguins.tail(5)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n339\nGentoo\nBiscoe\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFEMALE\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMALE\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFEMALE\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMALE"
  },
  {
    "objectID": "chapters/data.html#estructura",
    "href": "chapters/data.html#estructura",
    "title": "2  Datos",
    "section": "2.4 Estructura",
    "text": "2.4 Estructura\nEn nuestra hoja de datos penguins:\n\nCada columna representa una variable asociada a una propiedad o característica de los pingüinos. Por ejemplo, la primera columna, de nombre species indica la especie (Chinstrap, Adélie o Gentoo) de pingüino. En el siguiente apartado se describen las otras seis variables.\nCada fila se corresponde con un pingüino concreto de los \\(344\\) seleccionados en el estudio.\nCada celda contiene el valor de la característica del pingüino en la correspondiente fila.\n\nPor ejemplo, mirando la primera fila de la hoja de datos\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMALE\n\n\n\n\n\n\n\nvemos en la primera celda que el primer pingüino del listado es de la especie Adelie.\nUnos mismos datos pueden organizarse o presentarse de diferentes maneras en diferentes hojas de datos. Para que sea sencillo trabajar con una hoja de datos es conveniente que haya una relación clara entre su significado y su estructura. Se considera que la hoja de datos está ordenada o limpia (en inglés se habla de tidy data) si está organizada de acuerdo con los siguientes principios:\n\nCada columna representa una variable o característica de interés.\nCada fila representa una observación, caso o unidad experimental.\nCada celda contiene un valor, el de la variable en la correspondiente columna para la observación en la correspondiente fila.\n\nDe acuerdo con la descripción inicial, nuestra hoja de datos cumple con los principios anteriores."
  },
  {
    "objectID": "chapters/data.html#variables",
    "href": "chapters/data.html#variables",
    "title": "2  Datos",
    "section": "2.5 Variables",
    "text": "2.5 Variables\nEjecuta la siguiente instrucción:\n\npenguins.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB\n\n\nLa salida del método info() nos da una tabla con información sobre las siete variables de nuestra hoja de datos.\n\n2.5.1 Descripción\nEn la columna de la tabla de nombre Column se lista el nombre de las siete variables en penguins. El significado de las variables es el siguiente:\n\n\n\n\n\n\n\nNombre\nDescripción\n\n\n\n\nspecies\nEspecie de pingüinos (Chinstrap, Adélie o Gentoo)\n\n\nisland\nNombre de la isla del archipíelago Palmer (Dream, Torgersen o Biscoe)\n\n\nbill_length_mm\nLongitud del pico, en milímetros (ver Figura 2.1)\n\n\nbill_depth_mm\nAnchura del pico, en milímetros (ver Figura 2.1)\n\n\nflipper_length_mm\nLongitud de las alas\n\n\nbody_mass_g\nPeso en gramos\n\n\nsex\nSexo (MALE o FEMALE)\n\n\n\n\n\n\nFigura 2.1: Ilustración de las variables bill_length_mm y bill_depth_mm (Artista @allison_horst)\n\n\nVolviendo a mirar la primera fila de nuestra hoja de datos\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMALE\n\n\n\n\n\n\n\nahora sabes que el primer pingüino es de la especie Adelie, vive en la isla Torgensen, las dimensiones de su pico son \\(39.1 \\times 18.7\\) milímetros, sus alas miden \\(181\\) milímetros, pesa \\(3750\\) gramos, y es una hembra.\n\nEjercicio 2.1 Describe las características del tercer pingüino del estudio (índice 2).\n\n\n\n\n2.5.2 Valores nulos\nFíjate ahora en la columna Non-Null Count de la salida del método info():\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB\n\n\nLos valores nulos o perdidos son valores no disponibles, que no han podido registrarse, se representan con el símbolo NaN (iniciales de Not A Number).\nSi vuelves a mirar las cinco primeras filas de la hoja de datos verás que para el cuarto pingüino sólo sabemos que es de la especie Adelie y vive el la isla Torgersen, y se desconocen las otras cinco variables.\nLos diferentes métodos de la librería pandas contemplan la posibilidad de que las hojas de datos tengan valores nulos y los tratan de un forma predeterminada (por ejemplo, la media los ignora por defecto).\n\n\n2.5.3 Tipos de variables\nLas siete variables de nuestra hoja de datos se dividen en dos clases:\n\nspecies, island y sex son variables categóricas. Este tipo de variables representan una característica cualitativa que puede tomar un número finito y fijo de valores, denominados categorías o niveles.\nLas cuatro restantes, bill_length_mm, bill_depth_mm, flipper_length_mm y body_mass_g son variables numéricas, que representan características cuantitativas que se describen con valores numéricos (números enteros o reales).\n\npandas asigna un tipo a cada variable de una hoja de datos en función de los valores que presenta, como puede verse en la columna Dtype de la salida del método info():\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB"
  },
  {
    "objectID": "chapters/data.html#valores-nulos",
    "href": "chapters/data.html#valores-nulos",
    "title": "2  Datos",
    "section": "2.6 Valores nulos",
    "text": "2.6 Valores nulos\nFíjate ahora en la columna Non-Null Count de la salida del método info():\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB\n\n\nLos valores nulos o perdidos son valores no disponibles, que no han podido registrarse, se representan con el símbolo NaN (iniciales de Not A Number).\nSi vuelves a mirar las cinco primeras filas de la hoja de datos verás que para el cuarto pingüino sólo sabemos que es de la especie Adelie y vive el la isla Torgersen, y se desconocen las otras cinco variables.\nLos diferentes métodos de la librería pandas contemplan la posibilidad de que las hojas de datos tengan valores nulos y los tratan de un forma predeterminada (por ejemplo, la media los ignora por defecto)."
  },
  {
    "objectID": "chapters/data.html#tipos-de-variables",
    "href": "chapters/data.html#tipos-de-variables",
    "title": "2  Datos",
    "section": "2.7 Tipos de variables",
    "text": "2.7 Tipos de variables\nLas siete variables de nuestra hoja de datos se dividen en dos clases:\n\nspecies, island y sex son variables categóricas. Este tipo de variables representan una característica cualitativa que puede tomar un número finito y fijo de valores, denominados categorías o niveles.\nLas cuatro restantes, bill_length_mm, bill_depth_mm, flipper_length_mm y body_mass_g son variables numéricas, que representan características cuantitativas que se describen con números reales.\n\npandas asigna un tipo a cada variable de una hoja de datos en función de los valores que presenta, como puede verse en la columna Dtype de la salida del método info():\n\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 344 entries, 0 to 343\nData columns (total 7 columns):\n #   Column             Non-Null Count  Dtype  \n---  ------             --------------  -----  \n 0   species            344 non-null    object \n 1   island             344 non-null    object \n 2   bill_length_mm     342 non-null    float64\n 3   bill_depth_mm      342 non-null    float64\n 4   flipper_length_mm  342 non-null    float64\n 5   body_mass_g        342 non-null    float64\n 6   sex                333 non-null    object \ndtypes: float64(4), object(3)\nmemory usage: 18.9+ KB\n\n\nPara variables numéricas podremos calcular diferentes medidas descriptivas, como el máximo, la media, etc.\nPara variables categóricas podremos calcular el recuento de observaciones en cada categoría, pero no podremos realizar cálculos con sus valores."
  },
  {
    "objectID": "chapters/data.html#índice-de-una-hoja-de-datos",
    "href": "chapters/data.html#índice-de-una-hoja-de-datos",
    "title": "2  Datos",
    "section": "2.8 Índice de una hoja de datos",
    "text": "2.8 Índice de una hoja de datos\nIgual que cada columna tiene un nombre, cada fila también tiene una etiqueta identificativa. En nuestra hoja de datos cada uno de los \\(344\\) pingüinos se identifica con un número entero de la secuencia 0, 1, …, 333.\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMALE\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMALE\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFEMALE\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMALE\n\n\n\n\n\n\n\nLas etiquetas identificativas de las filas de una hoja de datos forman su índice. El índice de una hoja de datos de pandas se registra en su propiedad index.\n\npenguins.index\n\nRangeIndex(start=0, stop=344, step=1)\n\n\nSi cada pingüino estuviera identificado por un código, podríamos haber indicado utilizar esa variable como índice en el momento de la importación de los datos. Cuando no se indica el índice de una hoja de datos de forma explícita, pandas asigna una secuencia de números enteros comenzando en 0, como ha ocurrido en nuestro caso.\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/1categorical.html#el-método-describe",
    "href": "chapters/1categorical.html#el-método-describe",
    "title": "4  Una variable categórica",
    "section": "4.1 El método describe()",
    "text": "4.1 El método describe()\n\nspecies = penguins[[\"species\"]]\n\n\nspecies.describe()\n\n\n\n\n\n\n\n\nspecies\n\n\n\n\ncount\n344\n\n\nunique\n3\n\n\ntop\nAdelie\n\n\nfreq\n152\n\n\n\n\n\n\n\n\nDecir las funciones individuales.\n¿Hay diferencia entre convertirla a categórica (astype(\"category\")) o no ?"
  },
  {
    "objectID": "chapters/1categorical.html#tabla-de-frecuencias",
    "href": "chapters/1categorical.html#tabla-de-frecuencias",
    "title": "4  Una variable categórica",
    "section": "4.2 Tabla de frecuencias",
    "text": "4.2 Tabla de frecuencias\nTabla de frecuencias absolutas:\n\nspecies_counts = penguins.value_counts(subset=\"species\")\nspecies_counts\n\nspecies\nAdelie       152\nGentoo       124\nChinstrap     68\ndtype: int64\n\n\n\ntype(species_counts)\n\npandas.core.series.Series\n\n\n\nspecies_counts.index\n\nIndex(['Adelie', 'Gentoo', 'Chinstrap'], dtype='object', name='species')\n\n\n\nEjercicio 4.1 Determina el número total de hembras y de machos. Almacena el resultado en una variable de nombre sex_counts.\n\nTabla de frecuencias relativas (proporciones):\n\nspecies_props = penguins.value_counts(\n    subset=\"species\",\n    normalize=True\n)\nspecies_props\n\nspecies\nAdelie       0.441860\nGentoo       0.360465\nChinstrap    0.197674\ndtype: float64\n\n\nTabla de porcentajes:\n\n100*species_props\n\nspecies\nAdelie       44.186047\nGentoo       36.046512\nChinstrap    19.767442\ndtype: float64"
  },
  {
    "objectID": "chapters/1categorical.html#diagrama-de-barras-con-pandas",
    "href": "chapters/1categorical.html#diagrama-de-barras-con-pandas",
    "title": "4  Una variable categórica",
    "section": "4.3 Diagrama de barras con pandas",
    "text": "4.3 Diagrama de barras con pandas\n\nspecies_counts.plot.bar();\n\n\n\n\n\nspecies_counts.plot.barh();\n\n\n\n\n\nEjercicio 4.2 Usa la variable sex_counts creada en el Ejercicio 4.1 para crear un diagrama de barras mostrando el número total de hembras y de machos.\n\n\nEjercicio 4.3 Determina cuántos pingüinos hay en cada isla y dibuja un diagrama de barras con los resultados."
  },
  {
    "objectID": "chapters/1categorical.html#diagrama-de-barras-con-seaborn",
    "href": "chapters/1categorical.html#diagrama-de-barras-con-seaborn",
    "title": "4  Una variable categórica",
    "section": "4.4 Diagrama de barras con seaborn",
    "text": "4.4 Diagrama de barras con seaborn\n\nsns.barplot(x=species_counts.index, y=species_counts);\n\n\n\n\n\nsns.countplot(data=penguins, x=\"species\");\n\n\n\n\n\nsns.countplot(data=penguins, x=\"species\", order = ['Chinstrap', 'Adelie', 'Gentoo']);\n\n\n\n\n\nsns.countplot(data=penguins, x=\"species\", order = species_counts.index);\n\n\n\n\n\nsns.countplot(data=penguins, y=\"species\");\n\n\n\n\n\nEjercicio 4.4 Utiliza la función countplot() de la librería seaborn para crear diagramas de barras para\n\nel número de hembras y machos\nel número de pingüinos en cada isla\n\nsin crear previamente tablas de recuentos.\n\n\n4.4.1 Personalización de los gráficos\nNo es difícil personalizar los gráficos indicando títulos y colores 1. Por ejemplo: \n\n\nsns.countplot(data=penguins, x=\"species\", color=\"steelblue\");\n\n\n\n\n\nsns.countplot(data=penguins, x=\"species\", palette=[\"steelblue\", \"coral\", \"gold\"]);\n\n\n\n\n\nax = sns.countplot(data=penguins, x=\"species\", palette=\"pastel\")\nax.set(\n    title=\"Número de pingüinos de cada especie\",\n    xlabel=\"Especie\", \n    ylabel=\"Número de pingüinos\"\n);\n\n\n\n\n\n\n\n\nLa personalización de los gráficos no carece de importancia, siendo especialmente relevante dar títulos descriptivos a los ejes. No obstante, en esta práctica nos centraremos en los procedimientos para realizar los gráficos y en la mayoría de ocasiones omitiremos los detalles de personalización de los mismos, que pueden consultarse en la documentación de las librerías usadas.\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/1categorical.html#footnotes",
    "href": "chapters/1categorical.html#footnotes",
    "title": "4  Una variable categórica",
    "section": "",
    "text": "Puedes ver los colores disponibles aquí.↩︎"
  },
  {
    "objectID": "chapters/1numerical.html#el-método-describe",
    "href": "chapters/1numerical.html#el-método-describe",
    "title": "4  Una variable numérica",
    "section": "4.1 El método describe()",
    "text": "4.1 El método describe()"
  },
  {
    "objectID": "chapters/1numerical.html#histograma",
    "href": "chapters/1numerical.html#histograma",
    "title": "4  Una variable numérica",
    "section": "4.2 Histograma",
    "text": "4.2 Histograma\n\nEstán Dataframe.plot.hist() y Dataframe.hist()"
  },
  {
    "objectID": "chapters/1numerical.html#diagrama-de-caja-y-bigotes",
    "href": "chapters/1numerical.html#diagrama-de-caja-y-bigotes",
    "title": "4  Una variable numérica",
    "section": "4.3 Diagrama de caja y bigotes",
    "text": "4.3 Diagrama de caja y bigotes\n\nEstán Dataframe.plot.box() y Dataframe.boxplot()\n\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/groupby.html",
    "href": "chapters/groupby.html",
    "title": "6  Agrupar por categorías",
    "section": "",
    "text": "Habiendo descubierto el argumento subset de value_counts() y el método unstack() (ver en mis apuntes de pandas Gráficos &gt; Diagramas de barras &gt; Dos variables y Gráficos &gt; Diagramas de barras &gt; Tres variables) puede que esta sección no haga falta hasta analizar variable numérica por categorías.\n\n\n\nSplit\nApply\nCombine\n\nUn ejemplo sencillo como aplicar sum().\nO también tamaño muestral:\ndf.groupby(\"grade3\").size()\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/2categorical.html#tablas-de-frecuencias",
    "href": "chapters/2categorical.html#tablas-de-frecuencias",
    "title": "6  Dos variables categóricas",
    "section": "6.1 Tablas de frecuencias",
    "text": "6.1 Tablas de frecuencias"
  },
  {
    "objectID": "chapters/2categorical.html#tablas-de-contingencia",
    "href": "chapters/2categorical.html#tablas-de-contingencia",
    "title": "6  Dos variables categóricas",
    "section": "6.2 Tablas de contingencia",
    "text": "6.2 Tablas de contingencia\npd.crosstab(df2[\"factor1\"], df2[\"factor2\"])\npd.crosstab(\n    df2[\"factor1\"], \n    [df2[\"factor2\"], df2[\"factor3\"]]\n)"
  },
  {
    "objectID": "chapters/references.html",
    "href": "chapters/references.html",
    "title": "Referencias",
    "section": "",
    "text": "Gorman, KB, TD Williams, and WR Fraser. 2014. “Ecological Sexual\nDimorphism and Environmental Variability Within a Community of Antarctic\nPenguins (Genus Pygoscelis).” PLoS ONE 9 (3).\nhttps://doi.org/https://doi.org/10.1371/journal.pone.0090081.\n\n\nMcKinney, Wes. 2010. “Data Structures\nfor Statistical Computing in\nPython.” In Proceedings of the 9th\nPython in Science\nConference, edited by Stéfan van der Walt and Jarrod\nMillman, 56–61. https://doi.org/\n10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. “Pandas-Dev/Pandas:\nPandas.” Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. “Seaborn: Statistical Data\nVisualization.” Journal of Open Source Software 6 (60):\n3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/libraries.html#seaborn",
    "href": "chapters/libraries.html#seaborn",
    "title": "1  Librerías",
    "section": "1.2 seaborn",
    "text": "1.2 seaborn\n\n\n\n\n\nseaborn es una librería para visualización de datos. Permite crear gráficos estadísticos visualmente atractivos con pocas líneas de código. Y está diseñado para trabajar con las estructuras de datos creadas con pandas.\nUsaremos seaborn para realizar diferentes tipos de gráficos como diagramas de barras, histogramas, diagramas de caja y bigotes etc.\nAprenderemos por ejemplo a crear el siguiente gráfico, con los diagramas de caja y bigotes para el peso de los pingüinos de cada especie.\n\n\n\n\n\nPuedes consultar la documentación oficial de seaborn aquí. \n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/data.html#primeras-y-últimas-filas",
    "href": "chapters/data.html#primeras-y-últimas-filas",
    "title": "2  Datos",
    "section": "2.3 Primeras y últimas filas",
    "text": "2.3 Primeras y últimas filas\nCon las siguientes instrucciones puedes visualizar las cinco primeras y últimas filas de la hoja de datos penguins que acabas de crear.\n\npenguins.head(5)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMALE\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n\n\n3\nAdelie\nTorgersen\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n\n\n\n\n\n\n\n\npenguins.tail(5)\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n339\nGentoo\nBiscoe\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFEMALE\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMALE\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFEMALE\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMALE"
  },
  {
    "objectID": "chapters/subset.html#seleccionar-columnas-variables",
    "href": "chapters/subset.html#seleccionar-columnas-variables",
    "title": "3  Seleccionar filas o columnas en una hoja de datos",
    "section": "3.1 Seleccionar columnas (variables)",
    "text": "3.1 Seleccionar columnas (variables)\nHablar de Series. Diferencia entre penguins[\"body_mass_g\"] (Series) y penguins[[\"body_mass_g\"]] (Dataframe).\nVector unidimensional que puede contener cualquier tipo de datos (números enteros, cadenas, números reales …). Representa un conjunto de observaciones de una variable o característica.\nTodas las variables de una hoja de datos comparten el índice. Podemos ver una hoja de datos como un conjunto de variables, dispuestas en columnas, que comparten un índice común.\n\nThe best way to think about the pandas data structures is as flexible containers for lower dimensional data. For example, DataFrame is a container for Series, and Series is a container for scalars"
  },
  {
    "objectID": "chapters/subset.html#seleccionar-filas-observaciones",
    "href": "chapters/subset.html#seleccionar-filas-observaciones",
    "title": "3  Seleccionar filas o columnas en una hoja de datos",
    "section": "3.2 Seleccionar filas (observaciones)",
    "text": "3.2 Seleccionar filas (observaciones)\nHembras:\n\npenguins[penguins[\"sex\"] == \"FEMALE\"]\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n\n\n4\nAdelie\nTorgersen\n36.7\n19.3\n193.0\n3450.0\nFEMALE\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n\n\n12\nAdelie\nTorgersen\n41.1\n17.6\n182.0\n3200.0\nFEMALE\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n332\nGentoo\nBiscoe\n43.5\n15.2\n213.0\n4650.0\nFEMALE\n\n\n334\nGentoo\nBiscoe\n46.2\n14.1\n217.0\n4375.0\nFEMALE\n\n\n338\nGentoo\nBiscoe\n47.2\n13.7\n214.0\n4925.0\nFEMALE\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFEMALE\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFEMALE\n\n\n\n\n165 rows × 7 columns\n\n\n\nPingüinos que pesan más de \\(3.5\\) kilos:\n\npenguins[ penguins[\"body_mass_g\"] &gt; 3500 ]\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMALE\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n\n\n5\nAdelie\nTorgersen\n39.3\n20.6\n190.0\n3650.0\nMALE\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n\n\n7\nAdelie\nTorgersen\n39.2\n19.6\n195.0\n4675.0\nMALE\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n338\nGentoo\nBiscoe\n47.2\n13.7\n214.0\n4925.0\nFEMALE\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFEMALE\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMALE\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFEMALE\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMALE\n\n\n\n\n264 rows × 7 columns\n\n\n\nHembras que pesan más de \\(3.5\\) kilos:\n\npenguins[ ( penguins[\"sex\"] == \"FEMALE\" ) & ( penguins[\"body_mass_g\"] &gt; 3500 ) ]\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n\n\n6\nAdelie\nTorgersen\n38.9\n17.8\n181.0\n3625.0\nFEMALE\n\n\n15\nAdelie\nTorgersen\n36.6\n17.8\n185.0\n3700.0\nFEMALE\n\n\n22\nAdelie\nBiscoe\n35.9\n19.2\n189.0\n3800.0\nFEMALE\n\n\n25\nAdelie\nBiscoe\n35.3\n18.9\n187.0\n3800.0\nFEMALE\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n332\nGentoo\nBiscoe\n43.5\n15.2\n213.0\n4650.0\nFEMALE\n\n\n334\nGentoo\nBiscoe\n46.2\n14.1\n217.0\n4375.0\nFEMALE\n\n\n338\nGentoo\nBiscoe\n47.2\n13.7\n214.0\n4925.0\nFEMALE\n\n\n340\nGentoo\nBiscoe\n46.8\n14.3\n215.0\n4850.0\nFEMALE\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFEMALE\n\n\n\n\n99 rows × 7 columns"
  },
  {
    "objectID": "chapters/subset.html#seleccionar-un-subconjunto-de-filas-y-columnas",
    "href": "chapters/subset.html#seleccionar-un-subconjunto-de-filas-y-columnas",
    "title": "3  Seleccionar filas o columnas en una hoja de datos",
    "section": "3.3 Seleccionar un subconjunto de filas y columnas",
    "text": "3.3 Seleccionar un subconjunto de filas y columnas\nPeso e isla de las hembras:\n\npenguins.loc[penguins[\"sex\"] == \"FEMALE\", [\"body_mass_g\", \"island\"]]\n\n\n\n\n\n\n\n\nbody_mass_g\nisland\n\n\n\n\n1\n3800.0\nTorgersen\n\n\n2\n3250.0\nTorgersen\n\n\n4\n3450.0\nTorgersen\n\n\n6\n3625.0\nTorgersen\n\n\n12\n3200.0\nTorgersen\n\n\n...\n...\n...\n\n\n332\n4650.0\nBiscoe\n\n\n334\n4375.0\nBiscoe\n\n\n338\n4925.0\nBiscoe\n\n\n340\n4850.0\nBiscoe\n\n\n342\n5200.0\nBiscoe\n\n\n\n\n165 rows × 2 columns\n\n\n\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/subset-variables.html#seleccionar-una-variable",
    "href": "chapters/subset-variables.html#seleccionar-una-variable",
    "title": "3  Seleccionar variables",
    "section": "3.1 Seleccionar una variable",
    "text": "3.1 Seleccionar una variable\nUtiliza la siguiente instrucción para seleccionar la variable body_mass_g:\n\nmass = penguins[\"body_mass_g\"]\n\n\n\n\n\n\n\nPara seleccionar una sola variable, usa corchetes [] e indica el nombre de la columna de interés.\n\n\n\nAhora podemos aplicar la función max() para obtener el peso máximo:\n\nmass.max()\n\n6300.0\n\n\nVemos que el pingüino más pesado del estudio pesa \\(6\\) kilos y \\(300\\) gramos.\n\nPodemos realizar las dos operaciones, seleccionar la variable body_mass_g, y calcular su máximo con una sola instrucción:\n\npenguins[\"body_mass_g\"].max()\n\n6300.0\n\n\n\nEjercicio 3.1 Calcula el peso medio de todos los pingüinos (función mean()).\n\n\nEjercicio 3.2 Calcula el valor mínimo para la longitud de las alas de todos los pingüinos (función min())."
  },
  {
    "objectID": "chapters/subset-variables.html#seleccionar-una-lista-de-variables",
    "href": "chapters/subset-variables.html#seleccionar-una-lista-de-variables",
    "title": "3  Seleccionar variables",
    "section": "3.2 Seleccionar una lista de variables",
    "text": "3.2 Seleccionar una lista de variables\nPara seleccionar las dos variables relativas a las dimensiones del pico, bill_length_mm y bill_depth_mm, ejecuta la siguiente instrucción:\n\nbill = penguins[[\"bill_length_mm\", \"bill_depth_mm\"]]\n\n\n\n\n\n\n\nPara seleccionar una lista de variables, usa corchetes [] adicionales para crear la lista con los nombres de las columnas de interés (los corchetes exteriores indican que se van a seleccionar datos y los interiores crean la lista).\n\n\n\nAhora podemos calcular la media para ambas variables con\n\nbill.mean()\n\nbill_length_mm    43.92193\nbill_depth_mm     17.15117\ndtype: float64\n\n\n\nEjercicio 3.3 Calcula el número de observaciones no nulas (función count()) para las variables species y body_mass_g con una sola línea de código."
  },
  {
    "objectID": "chapters/subset-variables.html#series",
    "href": "chapters/subset-variables.html#series",
    "title": "3  Seleccionar variables en una hoja de datos",
    "section": "3.3 Series",
    "text": "3.3 Series\nEjecutando\n\ntype(bill)\n\npandas.core.frame.DataFrame\n\n\nvemos que el objeto que hemos creado antes al extraer las dos variables sobre las dimensiones del pico es de tipo DataFrame, igual que la hoja de datos original penguins.\nPero ejecutando\n\ntype(mass)\n\npandas.core.series.Series\n\n\nvemos que el objeto que hemos creado antes al extraer la variable body_mass_g es de un nuevo tipo, llamado Series.\nÉste es el tipo de datos que usa pandas para almacenar vectores unidimensionales, representando un conjunto de observaciones de una variable.\nPodemos usar el método head() para ver los cinco primeros valores de la variable:\n\nmass.head(5)\n\n0    3750.0\n1    3800.0\n2    3250.0\n3       NaN\n4    3450.0\nName: body_mass_g, dtype: float64\n\n\nAprecia que mass tiene el mismo índice que la hoja de datos penguins:\n\nmass.index\n\nRangeIndex(start=0, stop=344, step=1)\n\n\nPodemos ver una hoja de datos (DataFrame) como un conjunto de variables (Series), dispuestas en columnas, que comparten un índice común.\n\nEjercicio 3.4 Averigua si los siguientes objetos son de tipo Series o DataFrame: 1. penguins[\"flipper_length_mm\"] 2. penguins[[\"flipper_length_mm\"]]\n\nGeneralmente al aplicar un método propio de la clase Series a un objeto de clase DataFrame, se obtiene el mismo resultado que si se aplicara el método a cada una de las variables de la hoja de datos. Como hicimos antes al calcular simultáneamente la media de las dos variables en la hoja de datos bill con bill.mean().\nPero hay métodos propios de Series que no pueden aplicarse a DataFrame, métodos propios de DataFrame que no pueden aplicarse a Series, y métodos comunes a Series y DataFrame pero que requieren diferentes argumentos en cada caso. Por ejemplo, el método Series.sort_values() ordena los valores de una variable de mayor a menor. Puedes comprobarlo con\n\nmass.sort_values().head(5)\n\n190    2700.0\n64     2850.0\n58     2850.0\n116    2900.0\n98     2900.0\nName: body_mass_g, dtype: float64\n\n\nSin embargo el método DataFrame.sort_values() no puede aplicarse sin argumentos.\n\nEjercicio 3.5 Verifica que al ejecutar bill.sort_values() se obtiene un error e intenta interpretarlo y corregirlo.\n\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/subset-variables.html#dataframe-vs-series",
    "href": "chapters/subset-variables.html#dataframe-vs-series",
    "title": "3  Seleccionar variables",
    "section": "3.3 DataFrame vs Series",
    "text": "3.3 DataFrame vs Series\nEjecutando\n\ntype(bill)\n\npandas.core.frame.DataFrame\n\n\nvemos que el objeto bill que hemos creado antes al extraer las dos variables sobre las dimensiones del pico es de tipo DataFrame, igual que la hoja de datos original penguins.\nPero ejecutando\n\ntype(mass)\n\npandas.core.series.Series\n\n\nvemos que el objeto mass que hemos creado antes al extraer la variable body_mass_g es de un nuevo tipo, llamado Series.\nSeries es el tipo de datos que usa pandas para almacenar vectores unidimensionales, representando un conjunto de observaciones de una variable.\nPodemos usar el método head() para ver los cinco primeros valores de la variable:\n\nmass.head(5)\n\n0    3750.0\n1    3800.0\n2    3250.0\n3       NaN\n4    3450.0\nName: body_mass_g, dtype: float64\n\n\nAprecia que mass tiene el mismo índice que la hoja de datos penguins:\n\nmass.index\n\nRangeIndex(start=0, stop=344, step=1)\n\n\nPodemos ver una hoja de datos (DataFrame) como un conjunto de variables (Series), dispuestas en columnas, que comparten un índice común.\n\nEjercicio 3.4 Averigua si los siguientes objetos son de tipo Series o DataFrame:\n\npenguins[\"flipper_length_mm\"]\npenguins[[\"flipper_length_mm\"]]\n\n\nGeneralmente al aplicar un método propio de la clase Series a un objeto de clase DataFrame, se obtiene el mismo resultado que si se aplicara el método a cada una de las variables de la hoja de datos. Como hicimos antes al calcular simultáneamente la media de las dos variables en la hoja de datos bill con bill.mean().\nPero hay métodos propios de Series que no pueden aplicarse a DataFrame, métodos propios de DataFrame que no pueden aplicarse a Series, y métodos comunes a Series y DataFrame pero que requieren diferentes argumentos en cada caso. Por ejemplo, el método Series.sort_values() ordena los valores de una variable de mayor a menor. Puedes comprobarlo con\n\nmass.sort_values().head(5)\n\n190    2700.0\n64     2850.0\n58     2850.0\n116    2900.0\n98     2900.0\nName: body_mass_g, dtype: float64\n\n\nSin embargo el método DataFrame.sort_values() no puede aplicarse sin argumentos.\n\nEjercicio 3.5 Verifica que al ejecutar bill.sort_values() se obtiene un error e intenta interpretarlo y corregirlo.\n\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/data.html#índice",
    "href": "chapters/data.html#índice",
    "title": "2  Datos",
    "section": "2.6 Índice",
    "text": "2.6 Índice\nIgual que cada columna (variable) en una hoja de datos tiene un nombre, cada fila (observación) también tiene una etiqueta identificativa. En nuestra hoja de datos cada uno de los \\(344\\) pingüinos se identifica con un número entero de la secuencia 0, 1, …, 333.\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nMALE\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nFEMALE\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nFEMALE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\n341\nGentoo\nBiscoe\n50.4\n15.7\n222.0\n5750.0\nMALE\n\n\n342\nGentoo\nBiscoe\n45.2\n14.8\n212.0\n5200.0\nFEMALE\n\n\n343\nGentoo\nBiscoe\n49.9\n16.1\n213.0\n5400.0\nMALE\n\n\n\n\n\n\n\nLas etiquetas identificativas de las filas de una hoja de datos forman su índice. El índice de una hoja de datos de pandas se registra en su propiedad index.\n\npenguins.index\n\nRangeIndex(start=0, stop=344, step=1)\n\n\nSi cada pingüino estuviera identificado por un código, podríamos haber indicado utilizar esa variable como índice en el momento de la importación de los datos. Cuando no se indica el índice de una hoja de datos de forma explícita, pandas asigna una secuencia de números enteros comenzando en 0, como ha ocurrido en nuestro caso.\n\n\n\n\nMcKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  },
  {
    "objectID": "chapters/tbc.html",
    "href": "chapters/tbc.html",
    "title": "4  Continuará …",
    "section": "",
    "text": "McKinney, Wes. 2010. «Data Structures for Statistical Computing in Python». En Proceedings of the 9th Python in Science Conference, editado por Stéfan van der Walt y Jarrod Millman, 56-61. https://doi.org/ 10.25080/Majora-92bf1922-00a .\n\n\nThe pandas development team. 2020. «pandas-dev/pandas: Pandas». Zenodo. https://doi.org/10.5281/zenodo.3509134.\n\n\nWaskom, Michael L. 2021. «seaborn: statistical data visualization». Journal of Open Source Software 6 (60): 3021. https://doi.org/10.21105/joss.03021."
  }
]