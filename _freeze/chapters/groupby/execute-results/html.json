{
  "hash": "74e93f36dcbecb4f526b65c2eb497e72",
  "result": {
    "markdown": "# Agrupar por categorías {#sec-groupby}\n\n\nEn la @sec-head-tail visualizamos los datos de los cinco primeros pingüinos con la instrucción\n\n```{.python}\npenguins.head(5)\n```\n\nY en la @sec-subset-one-variable calculamos el peso máximo de todos los pingüinos con la orden\n\n```{.python}\npenguins[\"body_mass_g\"].max()\n```\n\nAhora nos planteamos realizar las operaciones anteriores, pero para cada especie de pingüinos (Adelie, Chinstrap y Gentoo), es decir, queremos:\n\n- Ver los datos de los primeros pingüinos de cada una de las tres especies.\n- Calcular el peso máximo en cada una de las tres especies de pingüinos.\n\n`pandas` proporciona el método `groupby()` para resolver este tipo de problemas.\n\nEl método `groupby()` divide una hoja de datos en los grupos o categorías definidos por una variable categórica (en nuestro caso las tres especies dadas por la variable `species`), de forma que al realizar una operación (como `head()` o `máx()`)  en la hoja de  datos por grupos, obtendremos el resultado de la operación en cada uno de los grupos (en nuestro caso en cada especie). \n\n![Ilustración del método `groupby()` en el manual de `pandas`](../img/06_groupby.svg)\n\n\n## Ejemplo 1: Primeras filas de cada especie {.unnumbered}\n\nPara ver los datos de los tres primeros pingüinos de cada especie, ejecuta la instrucción siguiente:\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\npenguins.groupby(\"species\").head(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>MALE</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>FEMALE</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>FEMALE</td>\n    </tr>\n    <tr>\n      <th>152</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>46.5</td>\n      <td>17.9</td>\n      <td>192.0</td>\n      <td>3500.0</td>\n      <td>FEMALE</td>\n    </tr>\n    <tr>\n      <th>153</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>50.0</td>\n      <td>19.5</td>\n      <td>196.0</td>\n      <td>3900.0</td>\n      <td>MALE</td>\n    </tr>\n    <tr>\n      <th>154</th>\n      <td>Chinstrap</td>\n      <td>Dream</td>\n      <td>51.3</td>\n      <td>19.2</td>\n      <td>193.0</td>\n      <td>3650.0</td>\n      <td>MALE</td>\n    </tr>\n    <tr>\n      <th>220</th>\n      <td>Gentoo</td>\n      <td>Biscoe</td>\n      <td>46.1</td>\n      <td>13.2</td>\n      <td>211.0</td>\n      <td>4500.0</td>\n      <td>FEMALE</td>\n    </tr>\n    <tr>\n      <th>221</th>\n      <td>Gentoo</td>\n      <td>Biscoe</td>\n      <td>50.0</td>\n      <td>16.3</td>\n      <td>230.0</td>\n      <td>5700.0</td>\n      <td>MALE</td>\n    </tr>\n    <tr>\n      <th>222</th>\n      <td>Gentoo</td>\n      <td>Biscoe</td>\n      <td>48.7</td>\n      <td>14.1</td>\n      <td>210.0</td>\n      <td>4450.0</td>\n      <td>FEMALE</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nObserva que en la salida anterior se muestran:\n\n- las filas de índices $0$, $1$ y $2$ correspondientes a los tres primeros pingüinos de la especie Adelie\n- las filas de índices $152$, $153$ y $154$ correspondientes a los tres primeros pingüinos de la especie Chinstrap\n- y las filasde índices $220$, $221$ y $222$ correspondientes a los tres primeros pingüinos de la especie Gentoo.\n\nAnalicemos, paso por paso, lo que ocurre al ejecutar la instrucción `penguins.groupby(\"species\").head(3)`:\n\n1. `penguins.groupby(\"species\")` parte la hoja de datos `penguins` en tres grupos correspondientes a las tres especies. Esta operación devuelve un objeto de un nuevo tipo llamado `DataFrameGroupBy`:\n\n\n   ::: {.cell execution_count=3}\n   ``` {.python .cell-code}\n   type(penguins.groupby(\"species\"))\n   ```\n   \n   ::: {.cell-output .cell-output-display execution_count=27}\n   ```\n   pandas.core.groupby.generic.DataFrameGroupBy\n   ```\n   :::\n   :::\n   \n   \n   Puedes pensar que después de aplicar `groupby()` tenemos los datos virtualmente divididos en tres hojas de datos: \n   - una hoja de datos con las $152$ filas de los pingüinos de la especie Adelie\n   - otra con las $68$ filas de los pingüinos de la especie Chinstrap \n   - y una tercera con las $124$ filas de los pingüinos de la especie Gentoo. \n\n2. Al aplicar `head(3)` sobre la hoja de datos agrupada creada con `penguins.groupby(\"species\")`, el efecto es que se aplica `head(3)` en cada uno de los tres grupos (como si se aplicara en cada una de las tres hojas de datos virtuales que ha creado `groupby()` a partir de `penguins`). \n\n   La salida que hemos obtenenido es la combinación de los tres resultados en los tres grupos. \n\n\n## Ejemplo 2: Peso máximo de cada especie {.unnumbered}\n\nPara obtener el peso máximo de cada especie ejecuta\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\npenguins[[\"species\", \"body_mass_g\"]].groupby(\"species\").max()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>body_mass_g</th>\n    </tr>\n    <tr>\n      <th>species</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>Adelie</th>\n      <td>4775.0</td>\n    </tr>\n    <tr>\n      <th>Chinstrap</th>\n      <td>4800.0</td>\n    </tr>\n    <tr>\n      <th>Gentoo</th>\n      <td>6300.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nVemos que:\n\n- el peso máximo entre los pingüinos de la especie Adelie es de $4$ kg y $775$ gramos.\n- el peso máximo entre los pingüinos de la especie Chinstrap es de $4$ kg y $800$ gramos.\n- el peso máximo entre los pingüinos de la especie Gentto (y entre todos los pingüinos) es de $6$ kg y $300$ gramos.\n\n\nAnalicemos la instrucción anterior paso por paso:\n\n1. Como nos interesa el peso máximo por especie, primero hemos escrito `penguins[[\"species\", \"body_mass_g\"]]`, para seleccionar las dos variables asociadas a las características de interés, `species` y `body_mass_g`, conforme aprendimos en la @sec-subset-several-variables.\n\n2. Después `groupby(\"species\")` divide la selección de la hoja de datos del paso anterior en tres grupos para cada especie.\n\n3. `max()` aplicada a la hoja de datos por grupos (de tipo `DataFrameGroupBy`) creada en el paso anterior, calcula el máximo en cada uno de los grupos para cada especie. \n\n   La salida que hemos obtenido es una tabla con los tres pesos máximos. \n\n***\n\nEn las hojas de datos agrupadas por categorías (objetos de tipo `DataFrameGroupBy`) también funcionan los mecanismos de selección de variables usando corchetes `[]`. Así, una forma equivalente de calcular el peso máximo de cada especie sería:\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\npenguins.groupby(\"species\")[\"body_mass_g\"].max()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```\nspecies\nAdelie       4775.0\nChinstrap    4800.0\nGentoo       6300.0\nName: body_mass_g, dtype: float64\n```\n:::\n:::\n\n\nLos pasos seguidos en esta segunda variante serían:\n \n1. `groupby(\"species\")` crea los tres grupos o categorías definidos por la variable `species`.\n\n2. `[\"body_mass_g\"]` selecciona la variable con el peso de los pingüinos en cada grupo.\n\n3. `max()` calcula el máximo en cada grupo.\n\n## Ejemplo 3: Recuento del número de pingüinos de cada especie {.unnumbered}\n\nEl método `value_counts()` que usamos en la @sec-value-counts para obtener una tabla de recuentos del número de pingüinos de cada especie es en el fondo la combinación de una operación de agrupación y la aplicación del método `count()`. De hecho es equivalente a \n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\npenguins.groupby(\"species\")[\"species\"].count()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```\nspecies\nAdelie       152\nChinstrap     68\nGentoo       124\nName: species, dtype: int64\n```\n:::\n:::\n\n\n::: {#exr-groupby-mean}\nCombina los métodos `groupby()` y `mean()` para calcular el peso medio de los pingüinos que viven en cada isla.\n:::\n\n::: {#exr-groupby-max}\nCombina los métodos `groupby()` y `median()` para calcular la mediana de la longitud del pico de las hembras y de los machos.\n:::\n\n::: {#exr-groupby-value_counts}\nCombina los métodos `groupby()` y `value_counts()` para calcular cuántos pingüinos de cada especie viven en cada isla.\n\nAnaliza el resultado para responder a las siguientes preguntas:\n\n- ¿cuál es la única especie de pingüinos presente en las tres islas?\n- ¿en qué islas viven los pingüinos de la especie Chinstrap?\n- ¿qué especies de pingüinos hay en la isla Biscoe?\n:::\n\n",
    "supporting": [
      "groupby_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}